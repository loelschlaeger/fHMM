[{"path":"https://loelschlaeger.de/fHMM/articles/fHMM.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"Introduction","text":"Earning money stock trading simple: one needs buy sell stocks right moment. general, stock traders seek invest beginning upward trends (hereon termed bullish markets) repel stocks just time prices fall (hereon termed bearish markets). stock prices depend variety environmental factors (Humpe Macmillan 2009; Cohen, Diether, Malloy 2013), chance certainly plays fundamental role hitting exact moments. However, investigating market behavior can lead better understanding trends alternate thereby increases chance making profitable investment decisions. fHMM package aims contributing investigations applying HMMs detect bearish bullish markets financial time series. also implemented hierarchical model extension presented Oelschläger Adam (2021), improves model’s capability distinguishing short- long-term trends allows interpret market dynamics multiple time scales.","code":""},{"path":"https://loelschlaeger.de/fHMM/articles/fHMM.html","id":"package-and-vignettes-overview","dir":"Articles","previous_headings":"","what":"Package and vignettes overview","title":"Introduction","text":"functionality fHMM package can classified functions data preparation, model estimation, model evaluation. following flowchart visualizes dependencies: tasks data preparation, model estimation, model evaluation well corresponding functions classes explained detail separate vignettes: vignette Model definition defines HMM hierarchical extension. vignette Controls introduces set_controls() function used model specifications. vignette Data management explains prepare simulate data introduces download_data() function can download financial data directly https://finance.yahoo.com/. vignette Model estimation defines likelihood function explains task numerical maximization via fit_model() function. vignette State decoding prediction introduces Viterbi algorithm used decoding likely underlying state sequence forecasting. vignette Model checking explains task checking fitted model via computing (pseudo-) residuals, implemented compute_residuals() function. vignette Model selection discusses task selecting (sense) best model among set competing models via compare_models() function.","code":""},{"path":"https://loelschlaeger.de/fHMM/articles/fHMM.html","id":"placement-in-the-literature","dir":"Articles","previous_headings":"","what":"Placement in the literature","title":"Introduction","text":"last decades, various HMM-type models emerged popular tools modeling financial time series subject state-switching time (Schaller Van Norden 1997; Dias, Vermunt, Ramos 2010; Ang Timmermann 2012; De Angelis Viroli 2017). Rydén, Teräsvirta, Åsbrink (1998), Bulla Bulla (2006), Nystrup, Madsen, Lindström (2015), e.g., used HMMs derive stylized facts stock returns, Hassan Nath (2005) Nystrup, Madsen, Lindström (2017) demonstrated HMMs can prove useful economic forecasting. recently, Lihn (2017) applied HMMs Standard Poor’s 500, HMMs used identify different levels market volatility, aiming providing evidence conjecture returns exhibit negative correlation volatility. Another application S&P 500 can found Nguyen (2018), HMMs used predict monthly closing prices derive optimal trading strategy, shown outperform conventional buy--hold strategy. applications, involve HMM-type models asset allocation portfolio optimization, can found Bekaert Ang (2002), Bulla et al. (2011), Nystrup, Madsen, Lindström (2015) Nystrup, Madsen, Lindström (2018), name examples. applications demonstrate HMMs constitute versatile class time series models naturally accounts dynamics typically exhibited financial time series.","code":""},{"path":[]},{"path":"https://loelschlaeger.de/fHMM/articles/v01_model_definition.html","id":"the-hidden-markov-model","dir":"Articles","previous_headings":"","what":"The Hidden Markov Model","title":"Model definition","text":"Hidden Markov models (HMMs) modeling framework time series data sequence observation assumed depend latent state process. peculiarity , instead observation process, state process directly observed. However, latent states comprise information environment model applied . connection hidden state process observed state-dependent process arises following: Let \\(N\\) number possible states. assume point time \\(t = 1, \\ldots, T\\), underlying process \\((S_t)_{t = 1, \\ldots, T}\\) selects one \\(N\\) states. , depending active state \\(S_t \\\\{ 1, \\ldots, N \\}\\), observation \\(X_t\\) state-dependent process \\((X_t)_{t = 1, \\ldots, T}\\) generated one \\(N\\) distributions \\(f^{(1)},\\dots,f^{(N)}.\\)2 Furthermore, assume \\((S_t)_t\\) Markovian, .e. assume actual state depends previous state. Henceforth, can identify process initial distribution \\(\\delta\\) transition probability matrix (t.p.m.) \\(\\Gamma\\). Moreover, construction, force process \\((X_t)_{t = 1, \\ldots, T}\\) satisfy conditional independence assumption, .e. actual observation \\(X_t\\) depends current state \\(S_t\\), depend previous observations states . following graphic visualizes dependence structure: Referring financial data, different states can serve proxies actual market situation, e.g. calm nervous. Even though moods observed directly, price changes trading volumes, clearly depend current mood market, can observed. Thereby, using underlying Markov process, can detect mood active point time different moods alternate. Depending current mood, price change generated different distribution. distributions characterize moods terms expected return volatility.3 Following Zucchini, MacDonald, Langrock (2016), assume initial distribution \\(\\delta\\) equals stationary distribution \\(\\pi\\), \\(\\pi = \\pi \\Gamma\\), .e. stationary henceforth initial distribution determined \\(\\Gamma\\).4 reasonable practical point view: one hand, hidden state process evolving time start observe hence can assumed stationary. hand, setting \\(\\delta=\\pi\\) reduces number parameters need estimated, convenient computational perspective.","code":""},{"path":"https://loelschlaeger.de/fHMM/articles/v01_model_definition.html","id":"adding-a-hierarchical-structure","dir":"Articles","previous_headings":"","what":"Adding a Hierarchical Structure","title":"Model definition","text":"hierarchical hidden Markov model (HMMM) flexible extension HMM can jointly model data observed two different time scales. two time series, one coarser one finer scale, differ number observations, e.g. monthly observations coarser scale daily weekly observations finer scale. Following concept HMMs, can model state-dependent time series jointly. First, treat time series coarser scale stemming ordinary HMM, refer coarse-scale HMM: time point \\(t\\) coarse-scale time space \\(\\{1,\\dots,T\\}\\), underlying process \\((S_t)_t\\) selects one state coarse-scale state space \\(\\{1,\\dots,N\\}\\). call \\((S_t)_t\\) hidden coarse-scale state process. Depending state active \\(t\\), one \\(N\\) distributions \\(f^{(1)},\\dots,f^{(N)}\\) realizes observation \\(X_t\\). process \\((X_t)_t\\) called observed coarse-scale state-dependent process. processes \\((S_t)_t\\) \\((X_t)_t\\) properties , namely \\((S_t)_t\\) first-order Markov process \\((X_t)_t\\) satisfies conditional independence assumption. Subsequently, segment observations fine-scale time series \\(T\\) distinct chunks, contains data points correspond \\(t\\)-th coarse-scale time point. Assuming \\(T^*\\) fine-scale observations every coarse-scale time point, face \\(T\\) chunks comprising \\(T^*\\) fine-scale observations . hierarchical structure now evinces model chunks one \\(N\\) possible fine-scale HMMs. fine-scale HMMs t.p.m. \\(\\Gamma^{*()}\\), initial distribution \\(\\delta^{*()}\\), stationary distribution \\(\\pi^{*()}\\), state-dependent distributions \\(f^{*(,1)},\\dots,f^{*(,N^*)}\\). fine-scale HMM selected explain \\(t\\)-th chunk fine-scale observations depends hidden coarse-scale state \\(S_t\\). \\(\\)-th fine-scale HMM explaining \\(t\\)-th chunk fine-scale observations consists following two stochastic processes: time point \\(t^*\\) fine-scale time space \\(\\{1,\\dots,T^*\\}\\), process \\((S^*_{t,t^*})_{t^*}\\) selects one state fine-scale state space \\(\\{1,\\dots,N^*\\}\\). call \\((S^*_{t,t^*})_{t^*}\\) hidden fine-scale state process. Depending state active \\(t^*\\), one \\(N^*\\) distributions \\(f^{*(,1)},\\dots,f^{*(,N^*)}\\) realizes observation \\(X^*_{t,t^*}\\). process \\((X^*_{t,t^*})_{t^*}\\) called observed fine-scale state-dependent process. fine-scale processes \\((S^*_{1,t^*})_{t^*},\\dots,(S^*_{T,t^*})_{t^*}\\) \\((X^*_{1,t^*})_{t^*},\\dots,(X^*_{T,t^*})_{t^*}\\) satisfy Markov property conditional independence assumption, respectively, well. Furthermore, assumed fine-scale HMM explaining \\((X^*_{t,t^*})_{t^*}\\) depends \\(S_t\\). hierarchical structure visualized following:","code":""},{"path":[]},{"path":"https://loelschlaeger.de/fHMM/articles/v02_controls.html","id":"the-set_controls-function","dir":"Articles","previous_headings":"","what":"The set_controls function","title":"Controls","text":"fHMM philosophy start modeling process setting data, model, estimation specifications. done defining named list controls passing set_controls() function. function checks specifications returns fHMM_controls object stores specifications thereby provides required information fHMM functionalities.","code":""},{"path":"https://loelschlaeger.de/fHMM/articles/v02_controls.html","id":"example-specifications","dir":"Articles","previous_headings":"","what":"Example specifications","title":"Controls","text":"demonstration, list example specifications using data Deutscher Aktienindex DAX2 (Janßen Rudolph 1992):","code":"dax <- download_data(symbol = \"^GDAXI\") head(dax) #>         Date    Open    High     Low   Close Adj.Close Volume #> 1 1987-12-30 1005.19 1005.19 1005.19 1005.19   1005.19      0 #> 2 1987-12-31      NA      NA      NA      NA        NA     NA #> 3 1988-01-01      NA      NA      NA      NA        NA     NA #> 4 1988-01-04  956.49  956.49  956.49  956.49    956.49      0 #> 5 1988-01-05  996.10  996.10  996.10  996.10    996.10      0 #> 6 1988-01-06 1006.01 1006.01 1006.01 1006.01   1006.01      0"},{"path":"https://loelschlaeger.de/fHMM/articles/v02_controls.html","id":"hmms-for-empirical-data","dir":"Articles","previous_headings":"Example specifications","what":"HMMs for empirical data","title":"Controls","text":"following lines code specify 3-state HMM state-dependent t-distributions data file dax.csv. dates provided column called Date data column called Close. logreturns = TRUE line transforms index data log-returns. runs = 50 line sets number numerical optimization runs 50.","code":"controls <- list(   states = 3,   sdds   = \"t\",   data   = list(file        = dax,                 date_column = \"Date\",                 data_column = \"Close\",                 logreturns  = TRUE),   fit    = list(runs        = 50) ) set_controls(controls) #> fHMM controls: #> * hierarchy: FALSE  #> * data type: empirical  #> * number of states: 3  #> * sdds: t()  #> * number of runs: 50"},{"path":"https://loelschlaeger.de/fHMM/articles/v02_controls.html","id":"simulated-hmm-data","dir":"Articles","previous_headings":"Example specifications","what":"Simulated HMM data","title":"Controls","text":"following specifies 2-state HMM state-dependent Gamma distributions, expectation values state 1 2 fixed 0.5 2, respectively. model fitted 500 data points (horizon = 500), going simulated model specification.","code":"controls <- list(   states  = 2,   sdds    = \"gamma(mu = 0.5|2)\",   horizon = 500 ) set_controls(controls) #> fHMM controls: #> * hierarchy: FALSE  #> * data type: simulated  #> * number of states: 2  #> * sdds: gamma(mu = 0.5|2)  #> * number of runs: 10"},{"path":"https://loelschlaeger.de/fHMM/articles/v02_controls.html","id":"hierarchical-hmms","dir":"Articles","previous_headings":"Example specifications","what":"Hierarchical HMMs","title":"Controls","text":"Specifying hierarchical HMMs analogously, except new parameters can specified (example period, see ) parameters now can specified hierarchies. help page set_controls() function provides overview possible specifications.","code":"controls <- list(   hierarchy = TRUE,   horizon   = c(100, 10),   sdds      = c(\"t(df = 1)\", \"t(df = Inf)\"),   period    = \"m\" ) set_controls(controls) #> fHMM controls: #> * hierarchy: TRUE  #> * data type: simulated  #> * number of states: 2 2  #> * sdds: t(df = 1) t(df = Inf)  #> * number of runs: 10"},{"path":[]},{"path":"https://loelschlaeger.de/fHMM/articles/v03_data_management.html","id":"empirical-data","dir":"Articles","previous_headings":"","what":"Empirical data","title":"Data management","text":"Empirical data can provided either data.frame comma-separated values (.csv) file, see vignette specifying controls details.2 fHMM package comes two datasets Deutscher Aktienindex VW stock demonstration purpose can accessed follows: prepare_data() function prepares data based data controls specifications returns fHMM_data object can passed fit_model() function model fitting.","code":"system.file(\"extdata\", \"dax.csv\", package = \"fHMM\") system.file(\"extdata\", \"vw.csv\", package = \"fHMM\") controls <- list(   states = 3,   sdds   = \"t\",   data   = list(file        = system.file(\"extdata\", \"dax.csv\", package = \"fHMM\"),                 date_column = \"Date\",                 data_column = \"Close\",                 logreturns  = TRUE) ) controls <- set_controls(controls) data <- prepare_data(controls) summary(data) #> Summary of fHMM empirical data #> * number of observations: 9012  #> * data source: dax.csv  #> * date column: Date  #> * log returns: TRUE"},{"path":"https://loelschlaeger.de/fHMM/articles/v03_data_management.html","id":"download-stock-data","dir":"Articles","previous_headings":"","what":"Download stock data","title":"Data management","text":"Daily stock prices listed https://finance.yahoo.com/ can downloaded directly via symbol stock’s symbol match official symbol https://finance.yahoo.com/,3 define time interval (format \"YYYY-MM-DD\"), file name file .csv-file saved. Per default, saved current working directory name <symbol>.csv. file = NULL (default), data saved returned data.frame. example, call downloads 21st century daily data DAX current working directory.","code":"download_data(symbol, from, to, file) dax <- download_data(symbol = \"^GDAXI\", from = \"2000-01-01\", to = Sys.Date()) head(dax) #>         Date    Open    High     Low   Close Adj.Close   Volume #> 1 2000-01-03 6961.72 7159.33 6720.87 6750.76   6750.76 43072500 #> 2 2000-01-04 6747.24 6755.36 6510.46 6586.95   6586.95 46678400 #> 3 2000-01-05 6585.85 6585.85 6388.91 6502.07   6502.07 52682800 #> 4 2000-01-06 6501.45 6539.31 6402.63 6474.92   6474.92 41180600 #> 5 2000-01-07 6489.94 6791.53 6470.14 6780.96   6780.96 56058900 #> 6 2000-01-10 6785.47 6975.26 6785.47 6925.52   6925.52 42006200"},{"path":"https://loelschlaeger.de/fHMM/articles/v03_data_management.html","id":"highlighting-events","dir":"Articles","previous_headings":"","what":"Highlighting events","title":"Data management","text":"Historical events can highlighted specifying named list events elements dates (vector dates) labels (vector labels events) passing plot method, example:","code":"events <- fHMM:::fHMM_events(   list(     dates = c(\"2001-09-11\",\"2008-09-15\",\"2020-01-27\"),     labels = c(\"9/11 terrorist attack\",\"Bankruptcy of Lehman Brothers\",\"First COVID-19 case in Germany\")     )   ) print(events) #>        dates                         labels #> 1 2001-09-11          9/11 terrorist attack #> 2 2008-09-15  Bankruptcy of Lehman Brothers #> 3 2020-01-27 First COVID-19 case in Germany plot(data, events = events)"},{"path":"https://loelschlaeger.de/fHMM/articles/v03_data_management.html","id":"simulated-data","dir":"Articles","previous_headings":"","what":"Simulated data","title":"Data management","text":"data parameter model’s controls unspecified, model fitted simulated data model specification. can useful testing functionality conducting simulation experiments. True model parameters can specified defining fHMM_parameters-object via fHMM_parameters() function passing prepare_data().","code":""},{"path":"https://loelschlaeger.de/fHMM/articles/v04_model_estimation.html","id":"likelihood-evaluation-using-the-forward-algorithm","dir":"Articles","previous_headings":"","what":"Likelihood evaluation using the forward algorithm","title":"Model estimation","text":"Deriving likelihood function hidden Markov model part hierarchical case, hence following discusses general case. HHMM can treated HMM two conditionally independent data streams; coarse-scale observations one hand corresponding chunk fine-scale observations connected fine-scale HMM hand. derive likelihood HHMM, start computing likelihood chunk fine-scale observations generated fine-scale HMM. fit \\(\\)-th fine-scale HMM, model parameters \\(\\theta^{*()}=(\\delta^{*()}, \\Gamma^{*()},(f^{*(,k)})_k)\\) \\(t\\)-th chunk fine-scale observations, denoted \\((X_{t,t^*})_{t^*}\\), consider fine-scale forward probabilities \\[\\begin{align*} \\alpha^{*()}_{k,t^*}=f^{*()}(X^*_{t,1},\\dots,X^*_{t,t^*}, S^*_{t,t^*}=k), \\end{align*}\\] \\(t^*=1,\\dots,T^*\\) \\(k=1,\\dots,N^*\\). Using fine-scale forward probabilities, fine-scale likelihoods can obtained law total probability \\[\\begin{align*} \\mathcal{L}^\\text{HMM}(\\theta^{*()}\\mid (X^*_{t,t^*})_{t^*})=\\sum_{k=1}^{N^*}\\alpha^{*()}_{k,T^*}. \\end{align*}\\] forward probabilities can calculated recursively \\[\\begin{align*} \\alpha^{*()}_{k,1} &= \\delta^{*()}_k f^{*(,k)}(X^*_{t,1}), \\\\ \\alpha^{*()}_{k,t^*} &= f^{*(,k)}(X^*_{t,t^*})\\sum_{j=1}^{N^*}\\gamma^{*()}_{jk}\\alpha^{*()}_{j,t^*-1}, \\quad t^*=2,\\dots,T^*. \\end{align*}\\] transition likelihood function HMM likelihood function HHMM straightforward: Consider coarse-scale forward probabilities \\[\\begin{align*} \\alpha_{,t}=f(X_1,\\dots,X_t,(X^*_{1,t^*})_{t^*},\\dots,(X^*_{t,t^*})_{t^*}, S_t=), \\end{align*}\\] \\(t=1,\\dots,T\\) \\(=1,\\dots,N\\). likelihood function HHMM results \\[\\begin{align*} \\mathcal{L}^\\text{HHMM}(\\theta,(\\theta^{*()})_i\\mid (X_t)_t,((X^*_{t,t^*})_{t^*})_t)=\\sum_{=1}^{N}\\alpha_{,T}. \\end{align*}\\] coarse-scale forward probabilities can calculated similarly applying recursive scheme \\[\\begin{align*} \\alpha_{,1} &= \\delta_i \\mathcal{L}^\\text{HMM}(\\theta^{*()}\\mid (X^*_{1,t^*})_{t^*})f^{()}(X_1), \\\\ \\alpha_{,t} &= \\mathcal{L}^\\text{HMM}(\\theta^{*()}\\mid (X^*_{t,t^*})_{t^*}) f^{()}(X_t)\\sum_{j=1}^{N}\\gamma_{ji}\\alpha_{j,t-1}, \\quad t=2,\\dots,T. \\end{align*}\\]","code":""},{"path":"https://loelschlaeger.de/fHMM/articles/v04_model_estimation.html","id":"challenges-associated-with-the-likelihood-maximization","dir":"Articles","previous_headings":"","what":"Challenges associated with the likelihood maximization","title":"Model estimation","text":"account parameter constraints associated transition probabilities (potentially parameters state-dependent distributions), use parameter transformations. ensure entries t.p.m.s fulfill non-negativity unity condition, estimate unconstrained values \\((\\eta_{ij})_{\\neq j}\\) non-diagonal entries \\(\\Gamma\\) derive probabilities using multinomial logit link \\[\\begin{align*} \\gamma_{ij}=\\frac{\\exp[\\eta_{ij}]}{1+\\sum_{k\\neq }\\exp[\\eta_{ik}]},~\\neq j \\end{align*}\\] rather estimating probabilities \\((\\gamma_{ij})_{,j}\\) directly. diagonal entries result unity condition \\[\\begin{align*} \\gamma_{ii}=1-\\sum_{j\\neq }\\gamma_{ij}. \\end{align*}\\] Furthermore, variances strictly positive, can achieved applying exponential transformation unconstrained estimator. numerically maximizing likelihood using Newton-Raphson-type method, often face numerical - overflow, can addressed maximizing logarithm likelihood incorporating constants conducive way, see Zucchini, MacDonald, Langrock (2016) Oelschläger Adam (2021) details. likelihood maximized respect relatively large number parameters, obtained maximum can local rather global one. avoid problem, recommended run maximization multiple times different, possibly randomly selected starting points, choose model corresponds highest likelihood, see Zucchini, MacDonald, Langrock (2016) Oelschläger Adam (2021) details.","code":""},{"path":"https://loelschlaeger.de/fHMM/articles/v04_model_estimation.html","id":"application","dir":"Articles","previous_headings":"","what":"Application","title":"Model estimation","text":"illustration, fit 3-state HMM state-dependent t-distributions DAX data prepared previous vignette data management: data object can directly passed fit_model() function numerically maximizes model’s (log-) likelihood function runs = 100 times.2 task can parallelized setting ncluster argument.3 estimated model saved fHMM package can accessed follows: Calling summary() method provides overview model fit, whereas coef() returns data frame estimated model coefficients: estimated state-dependent distributions can plotted follows:  mentioned , HMM likelihood function prone local optima. effect can visualized plotting log-likelihood value different optimization runs, best run marked red:","code":"controls <- list(   states = 3,   sdds   = \"t\",   data   = list(file        = system.file(\"extdata\", \"dax.csv\", package = \"fHMM\"),                 date_column = \"Date\",                 data_column = \"Close\",                 from        = \"2000-01-01\",                 to          = \"2021-12-31\",                 logreturns  = TRUE),   fit    = list(\"runs\" = 100) ) controls <- set_controls(controls) data <- prepare_data(controls) dax_model_3t <- fit_model(data, seed = 1, verbose = FALSE) data(dax_model_3t) summary(dax_model_3t) #> Summary of fHMM model #>  #>   simulated hierarchy       LL       AIC       BIC #> 1     FALSE     FALSE 17650.02 -35270.05 -35169.85 #>  #> State-dependent distributions: #> t()  #>  #> Estimates: #>                   lb   estimate        ub #> Gamma_2.1  2.747e-03  5.024e-03 9.133e-03 #> Gamma_3.1  2.080e-13  2.060e-13 2.029e-13 #> Gamma_1.2  1.006e-02  1.839e-02 3.337e-02 #> Gamma_3.2  1.516e-02  2.446e-02 3.924e-02 #> Gamma_1.3  2.250e-11  2.232e-11 2.198e-11 #> Gamma_2.3  1.195e-02  1.898e-02 2.995e-02 #> mu_1      -3.862e-03 -1.793e-03 2.754e-04 #> mu_2      -7.994e-04 -2.649e-04 2.696e-04 #> mu_3       9.642e-04  1.272e-03 1.579e-03 #> sigma_1    2.354e-02  2.586e-02 2.840e-02 #> sigma_2    1.226e-02  1.300e-02 1.380e-02 #> sigma_3    5.390e-03  5.833e-03 6.312e-03 #> df_1       5.551e+00  1.084e+01 2.115e+01 #> df_2       6.814e+00  4.866e+01 3.475e+02 #> df_3       3.973e+00  5.248e+00 6.934e+00 #>  #> States: #> decoded #>    1    2    3  #>  704 2926 2252  #>  #> Residuals: #>      Min.   1st Qu.    Median      Mean   3rd Qu.      Max.  #> -3.517897 -0.664017  0.012171 -0.003261  0.673180  3.693577 plot(dax_model_3t, plot_type = \"sdds\") plot(dax_model_3t, plot_type = \"ll\")"},{"path":[]},{"path":"https://loelschlaeger.de/fHMM/articles/v05_state_decoding_and_prediction.html","id":"state-decoding-using-the-viterbi-algorithm","dir":"Articles","previous_headings":"","what":"State decoding using the Viterbi algorithm","title":"State decoding and prediction","text":"financial markets, special interest infer underlying (hidden) states order gain insight actual market situation. Decoding full time series \\(S_1, \\ldots, S_T\\) called global decoding. Hereby, aim find likely trajectory hidden states estimated model. Global decoding can accomplished using -called Viterbi algorithm recursive scheme enabling find global maximum without confronted huge computational costs. end, follow Zucchini, MacDonald, Langrock (2016) define \\[\\zeta_{1i} = Pr(S_1 = , X_1 = x_1) = \\delta_i p_i(x_1)\\] \\(= 1, \\ldots, N\\) following \\(t = 2, \\ldots, T\\) \\[\\zeta_{ti} = \\operatorname*{max}_{s_1, \\ldots, s_{t-1}} Pr(S_{t-1} = s_{t-1}, S_t = , X_t = x_t).\\] , trajectory likely states \\(i_1, \\ldots, i_T\\) can calculated recursively \\[i_T = \\operatorname*{argmax}_{= 1, \\ldots, N} \\zeta_{Ti}\\] following \\(t = T-1, \\ldots, 1\\) \\[i_t = \\operatorname*{argmax}_{= 1, \\ldots, N} (\\zeta_{ti} \\gamma_{, i_{t+1}}).\\] Transferring state decoding HHMMs straightforward: first coarse-scale state process must decoded. Afterwards, using information fine-scale state process can decoded, see Adam et al. (2019).","code":""},{"path":"https://loelschlaeger.de/fHMM/articles/v05_state_decoding_and_prediction.html","id":"the-decode_states-function","dir":"Articles","previous_headings":"","what":"The decode_states() function","title":"State decoding and prediction","text":"revisit DAX model vignette model estimation: underlying states can decoded via decode_states() function: now can visualize decoded time series:  Mind model invariant permutations state labels. Therefore, fHMM provides option switch labels decoding via reorder_states() function, example:","code":"data(dax_model_3t) dax_model_3t <- decode_states(dax_model_3t) #> Decoded states plot(dax_model_3t) dax_model_3t <- reorder_states(dax_model_3t, 3:1)"},{"path":"https://loelschlaeger.de/fHMM/articles/v05_state_decoding_and_prediction.html","id":"prediction","dir":"Articles","previous_headings":"","what":"Prediction","title":"State decoding and prediction","text":"decoded underlying states, possible compute state probabilities next observations. Based probabilities combination estimated state-dependent distributions, next observations can predicted, compare Zucchini, MacDonald, Langrock (2016):","code":"predict(dax_model_3t, ahead = 10) #>    state_1 state_2 state_3       lb estimate      ub #> 1  0.97554 0.02446 0.00000 -0.01065  0.00123 0.01311 #> 2  0.95215 0.04773 0.00012 -0.01092  0.00120 0.01332 #> 3  0.92976 0.06988 0.00036 -0.01119  0.00116 0.01352 #> 4  0.90835 0.09095 0.00070 -0.01145  0.00113 0.01371 #> 5  0.88786 0.11099 0.00115 -0.01170  0.00110 0.01390 #> 6  0.86825 0.13007 0.00169 -0.01195  0.00107 0.01408 #> 7  0.84948 0.14821 0.00231 -0.01218  0.00104 0.01426 #> 8  0.83152 0.16547 0.00301 -0.01241  0.00101 0.01443 #> 9  0.81432 0.18189 0.00379 -0.01263  0.00098 0.01459 #> 10 0.79785 0.19752 0.00463 -0.01285  0.00095 0.01476"},{"path":[]},{"path":"https://loelschlaeger.de/fHMM/articles/v06_model_checking.html","id":"model-checking-using-pseudo-residuals","dir":"Articles","previous_headings":"","what":"Model checking using pseudo-residuals","title":"Model checking","text":"Analyzing pseudo-residuals allows us check whether fitted model describes data well. Since observations explained different distributions (depending active state), done analyzing standard residuals. transform observations common scale, proceed follows: \\(X_t\\) invertible distribution function \\(F_{X_t}\\), \\[\\begin{align*} Z_t=\\Phi^{-1}(F_{X_t} (X_t)) \\end{align*}\\] standard normally distributed, \\(\\Phi\\) denotes cumulative distribution function standard normal distribution. observations, \\((X_t)_t\\), modeled well -called pseudo-residuals, \\((Z_t)_t\\), approximately standard normally distributed, can visually assessed using quantile-quantile plots investigated using statistical tests Jarque-Bera test (Zucchini, MacDonald, Langrock 2016). HHMMs, first decode coarse-scale state process using Viterbi algorithm. Subsequently, assign coarse-scale observation distribution function fitted model perform transformation described . Using Viterbi-decoded coarse-scale states, treat fine-scale observations analogously.","code":""},{"path":"https://loelschlaeger.de/fHMM/articles/v06_model_checking.html","id":"implementation","dir":"Articles","previous_headings":"","what":"Implementation","title":"Model checking","text":"fHMM, pseudo-residuals can computed via compute_residuals() function, provided states decoded beforehand. revisit DAX example: following line computes residuals saves model object: residuals can visualized follows:  additional normality tests, residuals can extracted model object via residuals() method. following lines exemplary perform Jarque–Bera test (Jarque Bera 1987):","code":"data(dax_model_3t) dax_model_3t <- compute_residuals(dax_model_3t) #> Computed residuals plot(dax_model_3t, plot_type = \"pr\") tseries::jarque.bera.test(residuals(dax_model_3t)) #>  #>  Jarque Bera Test #>  #> data:  residuals(dax_model_3t) #> X-squared = 2.2403, df = 2, p-value = 0.3262"},{"path":[]},{"path":"https://loelschlaeger.de/fHMM/articles/v07_model_selection.html","id":"information-criteria","dir":"Articles","previous_headings":"","what":"Information criteria","title":"Model selection","text":"Common model selection tools information criteria, Akaike information criterion (AIC) Bayesian information criterion (BIC), aim finding compromise model fit model complexity. AIC defined \\[\\begin{align*} \\text{AIC} = - 2 \\log (\\mathcal{L}^\\text{(H)HMM}(\\theta,(\\theta^{*()})_i\\mid (X_t)_t,((X^*_{t,t^*})_{t^*})_t)) + 2 p, \\end{align*}\\] \\(p\\) denotes number parameters, BIC defined \\[\\begin{align*} \\text{BIC} = - 2 \\log (\\mathcal{L}^\\text{(H)HMM}(\\theta,(\\theta^{*()})_i\\mid (X_t)_t,((X^*_{t,t^*})_{t^*})_t)) + \\log(T) p, \\end{align*}\\] \\(T\\) number observations.","code":""},{"path":"https://loelschlaeger.de/fHMM/articles/v07_model_selection.html","id":"challenges-associated-with-model-selection","dir":"Articles","previous_headings":"","what":"Challenges associated with model selection","title":"Model selection","text":"practice, however, information criteria often favor overly complex models. Real data typically exhibit structure can actually captured model. can case true state-dependent distributions complex fully modeled (rather simple) parametric distribution, certain temporal patterns neglected model formulation. Additional states may able capture structure, can lead increased goodness fit outweighs higher model complexity. However, models many states difficult interpret therefore often desired, information criteria treaten caution considered rough guidance. -depth discussion pitfalls, practical challenges, pragmatic solutions regarding model selection, see Pohle et al. (2017).","code":""},{"path":"https://loelschlaeger.de/fHMM/articles/v07_model_selection.html","id":"the-compare_models-function","dir":"Articles","previous_headings":"","what":"The compare_models() function","title":"Model selection","text":"fHMM package provides convenient tool comparing different models via compare_models() function. models (arbitrarily many) can directly passed compare_models() function returns overview model selection criteria. , compare 2-state HMM normal state-dependent distributions 3-state HMM state-dependent t-distributions DAX data, complex model clearly preferred:","code":"data(dax_model_2n) data(dax_model_3t) compare_models(dax_model_2n, dax_model_3t) #>              parameters loglikelihood       AIC       BIC #> dax_model_2n          6      17403.61 -34795.21 -34755.13 #> dax_model_3t         15      17650.02 -35270.05 -35169.85"},{"path":[]},{"path":"https://loelschlaeger.de/fHMM/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lennart Oelschläger. Author, maintainer. Timo Adam. Author. Rouven Michels. Author.","code":""},{"path":"https://loelschlaeger.de/fHMM/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Oelschläger L, Adam T, Michels R (2024). fHMM: Fitting Hidden Markov Models Financial Data. R package version 1.3.0, https://loelschlaeger.de/fHMM/.","code":"@Manual{,   title = {fHMM: Fitting Hidden Markov Models to Financial Data},   author = {Lennart Oelschläger and Timo Adam and Rouven Michels},   year = {2024},   note = {R package version 1.3.0},   url = {https://loelschlaeger.de/fHMM/}, }"},{"path":"https://loelschlaeger.de/fHMM/index.html","id":"hmms-for-finance-","dir":"","previous_headings":"","what":"Fit hidden Markov models to financial data","title":"Fit hidden Markov models to financial data","text":"fHMM R package allows detection characterization financial market regimes time series data applying hidden Markov Models (HMMs). vignettes outline package functionality model formulation. reference method, see Oelschläger, L., T. Adam. 2021. “Detecting Bearish Bullish Markets Financial Time Series Using Hierarchical Hidden Markov Models.” Statistical Modelling. https://doi.org/10.1177/1471082X211034048 , illustrate application German stock index DAX. also show use package simulate HMM data, compute model likelihood, decode hidden states using Viterbi algorithm.","code":""},{"path":"https://loelschlaeger.de/fHMM/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fit hidden Markov models to financial data","text":"can install released package version CRAN :","code":"install.packages(\"fHMM\")"},{"path":"https://loelschlaeger.de/fHMM/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Fit hidden Markov models to financial data","text":"open contributions appreciate input: encounter issues, please submit bug reports issues. ideas new features, please submit feature requests. like add extensions package, please fork master branch submit merge request.","code":""},{"path":"https://loelschlaeger.de/fHMM/index.html","id":"example-fitting-an-hmm-to-the-dax","dir":"","previous_headings":"","what":"Example: Fitting an HMM to the DAX","title":"Fit hidden Markov models to financial data","text":"fit 3-state HMM state-dependent t-distributions DAX log-returns 2000 2022. states can interpreted proxies bearish (green ) bullish markets (red) “-” market state (yellow). package build-function download financial data Yahoo Finance: first need define model: function prepare_data() prepares data estimation: summary() method gives overview: fit model subsequently decode hidden states compute (pseudo-) residuals: summary() method gives overview model fit: estimated model, can visualize state-dependent distributions decoded time series:  (pseudo-) residuals help evaluate model fit:","code":"library(\"fHMM\") dax <- download_data(symbol = \"^GDAXI\") controls <- set_controls(   states      = 3,   sdds        = \"t\",   file        = dax,   date_column = \"Date\",   data_column = \"Close\",   logreturns  = TRUE,   from        = \"2000-01-01\",   to          = \"2022-12-31\" ) data <- prepare_data(controls) summary(data) #> Summary of fHMM empirical data #> * number of observations: 5882  #> * data source: data.frame  #> * date column: Date  #> * log returns: TRUE model <- fit_model(data) model <- decode_states(model) model <- compute_residuals(model) summary(model) #> Summary of fHMM model #>  #>   simulated hierarchy       LL       AIC       BIC #> 1     FALSE     FALSE 17650.02 -35270.05 -35169.85 #>  #> State-dependent distributions: #> t()  #>  #> Estimates: #>                   lb   estimate        ub #> Gamma_2.1  2.747e-03  5.024e-03 9.133e-03 #> Gamma_3.1  2.080e-13  2.060e-13 2.029e-13 #> Gamma_1.2  1.006e-02  1.839e-02 3.337e-02 #> Gamma_3.2  1.516e-02  2.446e-02 3.924e-02 #> Gamma_1.3  2.250e-11  2.232e-11 2.198e-11 #> Gamma_2.3  1.195e-02  1.898e-02 2.995e-02 #> mu_1      -3.862e-03 -1.793e-03 2.754e-04 #> mu_2      -7.994e-04 -2.649e-04 2.696e-04 #> mu_3       9.642e-04  1.272e-03 1.579e-03 #> sigma_1    2.354e-02  2.586e-02 2.840e-02 #> sigma_2    1.226e-02  1.300e-02 1.380e-02 #> sigma_3    5.390e-03  5.833e-03 6.312e-03 #> df_1       5.551e+00  1.084e+01 2.115e+01 #> df_2       6.814e+00  4.866e+01 3.475e+02 #> df_3       3.973e+00  5.248e+00 6.934e+00 #>  #> States: #> decoded #>    1    2    3  #>  704 2926 2252  #>  #> Residuals: #>      Min.   1st Qu.    Median      Mean   3rd Qu.      Max.  #> -3.517897 -0.664017  0.012171 -0.003261  0.673180  3.693577 events <- fHMM_events(   list(dates = c(\"2001-09-11\", \"2008-09-15\", \"2020-01-27\"),        labels = c(\"9/11 terrorist attack\", \"Bankruptcy Lehman Brothers\", \"First COVID-19 case Germany\")) ) plot(model, plot_type = c(\"sdds\",\"ts\"), events = events) plot(model, plot_type = \"pr\")"},{"path":"https://loelschlaeger.de/fHMM/index.html","id":"simulating-hmm-data","dir":"","previous_headings":"","what":"Simulating HMM data","title":"Fit hidden Markov models to financial data","text":"fHMM package supports data simulation HMM access model likelihood function model fitting Viterbi algorithm state decoding. example, consider 2-state HMM state-dependent Gamma distributions time horizon 1000 data points. Define model parameters via fHMM_parameters() function (unspecified parameters set random). Simulate data points model via simulate_hmm() function.  log-likelihood function ll_hmm() evaluated identified unconstrained parameter values, can derived via par2parUncon() function. Note transformation takes care restrictions, Gamma must transition probability matrix (can ensure via logit link) mu sigma must positive (assumption Gamma distribution, can ensure via exponential link). maximum likelihood estimation model parameters, can numerically optimize ll_hmm() parUncon (rather minimize negative log-likelihood). interpret estimate, needs back transformed constrained parameter space via parUncon2par() function. state-labeling identified.","code":"controls <- set_controls(   states  = 2,   sdds    = \"gamma\",   horizon = 1000 ) par <- fHMM_parameters(   controls = controls,   Gamma    = matrix(c(0.95, 0.05, 0.05, 0.95), 2, 2),    mu       = c(1, 3),    sigma    = c(1, 3) ) sim <- simulate_hmm(   controls        = controls,   true_parameters = par ) plot(sim$data, col = sim$markov_chain, type = \"b\") (parUncon <- par2parUncon(par, controls)) #> gammasUncon_21 gammasUncon_12      muUncon_1      muUncon_2   sigmaUncon_1  #>      -2.944439      -2.944439       0.000000       1.098612       0.000000  #>   sigmaUncon_2  #>       1.098612  #> attr(,\"class\") #> [1] \"parUncon\" \"numeric\" ll_hmm(parUncon, sim$data, controls) #> [1] -1620.515 ll_hmm(parUncon, sim$data, controls, negative = TRUE) #> [1] 1620.515 optimization <- nlm(   f = ll_hmm, p = parUncon, observations = sim$data, controls = controls, negative = TRUE )  (estimate <- optimization$estimate) #> [1] -3.4633918 -3.4406564  0.0599985  1.0645290  0.1151781  1.0794625 class(estimate) <- \"parUncon\" estimate <- parUncon2par(estimate, controls)  par$Gamma #>         state_1 state_2 #> state_1    0.95    0.05 #> state_2    0.05    0.95 estimate$Gamma #>            state_1    state_2 #> state_1 0.96895127 0.03104873 #> state_2 0.03037199 0.96962801  par$mu #> muCon_1 muCon_2  #>       1       3 estimate$mu #>  muCon_1  muCon_2  #> 1.061835 2.899473  par$sigma #> sigmaCon_1 sigmaCon_2  #>          1          3 estimate$sigma #> sigmaCon_1 sigmaCon_2  #>   1.122073   2.943097"},{"path":"https://loelschlaeger.de/fHMM/reference/compare_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare multiple models — compare_models","title":"Compare multiple models — compare_models","text":"function performs model comparison comparing multiple fHMM_model objects respect number model parameters, log-likelihood value, AIC value, BIC value.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/compare_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare multiple models — compare_models","text":"","code":"compare_models(...)"},{"path":"https://loelschlaeger.de/fHMM/reference/compare_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare multiple models — compare_models","text":"... list one objects class fHMM_model.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/compare_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare multiple models — compare_models","text":"data.frame models rows comparison criteria columns.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/compare_models.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare multiple models — compare_models","text":"","code":"### 3-state HMM with t-distributions is preferred over 2-state HMM with ### normal distributions for the DAX data based on AIC and BIC compare_models(dax_model_2n, dax_model_3t) #>              parameters loglikelihood       AIC       BIC #> dax_model_2n          6      17403.61 -34795.21 -34755.13 #> dax_model_3t         15      17650.02 -35270.05 -35169.85"},{"path":"https://loelschlaeger.de/fHMM/reference/compute_T_star.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute lengths of fine-scale chunks — compute_T_star","title":"Compute lengths of fine-scale chunks — compute_T_star","text":"helper function computes lengths fine-scale chunks hierarchical case.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/compute_T_star.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute lengths of fine-scale chunks — compute_T_star","text":"","code":"compute_T_star(horizon, period, dates = NULL, seed = NULL)"},{"path":"https://loelschlaeger.de/fHMM/reference/compute_T_star.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute lengths of fine-scale chunks — compute_T_star","text":"horizon element controls$horizon, .e., integer vector length 2, second entry can NA_integer_. period element controls$period, .e. one \"w\", \"m\", \"q\", \"y\". dates character vector dates empirical fine-scale data (). default, dates = NULL. seed Set seed simulation flexible chunk lengths. default, seed = NULL (.e., seed).","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/compute_T_star.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute lengths of fine-scale chunks — compute_T_star","text":"integer vector fine-scale chunk sizes.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/compute_ci.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute confidence intervals — compute_ci","title":"Compute confidence intervals — compute_ci","text":"helper function computes confidence intervals estimates fHMM_model object using inverse Fisher information.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/compute_ci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute confidence intervals — compute_ci","text":"","code":"compute_ci(x, alpha = 0.05)"},{"path":"https://loelschlaeger.de/fHMM/reference/compute_ci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute confidence intervals — compute_ci","text":"x object class fHMM_model. alpha numeric 0 1, alpha level confidence interval. default, alpha = 0.05, computes 95% confidence interval.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/compute_ci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute confidence intervals — compute_ci","text":"list containing following elements: lb: lower bound confidence estimate: point estimate ub: upper bound confidence","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/compute_residuals.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute (pseudo-) residuals — compute_residuals","title":"Compute (pseudo-) residuals — compute_residuals","text":"function computes (pseudo-) residuals fHMM_model object.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/compute_residuals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute (pseudo-) residuals — compute_residuals","text":"","code":"compute_residuals(x, verbose = TRUE)"},{"path":"https://loelschlaeger.de/fHMM/reference/compute_residuals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute (pseudo-) residuals — compute_residuals","text":"x object class fHMM_model. verbose Set TRUE (default) print progress messages.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/compute_residuals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute (pseudo-) residuals — compute_residuals","text":"object class fHMM_model residuals included.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/compute_residuals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute (pseudo-) residuals — compute_residuals","text":"","code":"compute_residuals(dax_model_3t) #> Computed residuals #> fHMM fitted model: #> * total estimation time: 7 mins  #> * accepted runs: 100 of 100  #> * log-likelihood: 17650.02  summary(residuals(dax_model_3t)) #>      Min.   1st Qu.    Median      Mean   3rd Qu.      Max.  #> -3.517897 -0.664017  0.012171 -0.003261  0.673180  3.693577"},{"path":"https://loelschlaeger.de/fHMM/reference/dax.html","id":null,"dir":"Reference","previous_headings":"","what":"Deutscher Aktienindex (DAX) index data — dax","title":"Deutscher Aktienindex (DAX) index data — dax","text":"Deutscher Aktienindex (DAX) index data 1988 2022 Yahoo Finance.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/dax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deutscher Aktienindex (DAX) index data — dax","text":"","code":"dax"},{"path":"https://loelschlaeger.de/fHMM/reference/dax.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Deutscher Aktienindex (DAX) index data — dax","text":"data.frame 9012 rows following 7 columns: Date: date. Open: Opening price. High: Highest price. Low: Lowest price. Close: Close price adjusted splits. Adj.Close: Close price adjusted dividends splits. Volume: Trade volume.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/dax.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deutscher Aktienindex (DAX) index data — dax","text":"data obtained via: data also available .csv file via:","code":"dax <- download_data(   symbol = \"^GDAXI\",   # DAX identifier on Yahoo Finance   from = \"1988-01-01\", # first observation   to = \"2022-12-31\"    # last observation ) system.file(\"extdata\", \"dax.csv\", package = \"fHMM\")"},{"path":"https://loelschlaeger.de/fHMM/reference/dax_model_2n.html","id":null,"dir":"Reference","previous_headings":"","what":"DAX 2-state HMM with normal distributions — dax_model_2n","title":"DAX 2-state HMM with normal distributions — dax_model_2n","text":"pre-computed HMM closing prices DAX 2000 2022 two hidden states normal state-dependent distributions demonstration purpose.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/dax_model_2n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DAX 2-state HMM with normal distributions — dax_model_2n","text":"","code":"data(\"dax_model_2n\")"},{"path":"https://loelschlaeger.de/fHMM/reference/dax_model_2n.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"DAX 2-state HMM with normal distributions — dax_model_2n","text":"object class fHMM_model.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/dax_model_2n.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DAX 2-state HMM with normal distributions — dax_model_2n","text":"model estimated via:","code":"controls <- set_controls( states = 2, sdds   = \"normal\", data   = list(   file        = dax,   date_column = \"Date\",   data_column = \"Close\",   logreturns  = TRUE,   from        = \"2000-01-03\",   to          = \"2022-12-31\" ), fit    = list(\"runs\" = 10, \"gradtol\" = 1e-6, \"steptol\" = 1e-6) ) dax_data <- prepare_data(controls) dax_model_2n <- fit_model(dax_data, seed = 1) dax_model_2n <- decode_states(dax_model_2n) dax_model_2n <- compute_residuals(dax_model_2n) summary(dax_model_2n)"},{"path":"https://loelschlaeger.de/fHMM/reference/dax_model_3t.html","id":null,"dir":"Reference","previous_headings":"","what":"DAX 3-state HMM with t-distributions — dax_model_3t","title":"DAX 3-state HMM with t-distributions — dax_model_3t","text":"pre-computed HMM closing prices DAX 2000 2022 three hidden states state-dependent t-distributions demonstration purpose.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/dax_model_3t.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DAX 3-state HMM with t-distributions — dax_model_3t","text":"","code":"data(\"dax_model_3t\")"},{"path":"https://loelschlaeger.de/fHMM/reference/dax_model_3t.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"DAX 3-state HMM with t-distributions — dax_model_3t","text":"object class fHMM_model.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/dax_model_3t.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DAX 3-state HMM with t-distributions — dax_model_3t","text":"model estimated via:","code":"controls <- set_controls(   states = 3,   sdds   = \"t\",   data   = list(     file        = dax,     date_column = \"Date\",     data_column = \"Close\",     logreturns  = TRUE,     from        = \"2000-01-03\",     to          = \"2022-12-31\"   ),   fit    = list(     runs        = 100,      iterlim     = 300,     gradtol     = 1e-6,     steptol     = 1e-6   ) ) dax_data <- prepare_data(controls) dax_model_3t <- fit_model(dax_data, seed = 1, ncluster = 10) dax_model_3t <- decode_states(dax_model_3t) dax_model_3t <- compute_residuals(dax_model_3t) summary(dax_model_3t)"},{"path":"https://loelschlaeger.de/fHMM/reference/dax_vw_model.html","id":null,"dir":"Reference","previous_headings":"","what":"DAX/VW hierarchical HMM with t-distributions — dax_vw_model","title":"DAX/VW hierarchical HMM with t-distributions — dax_vw_model","text":"pre-computed HHMM monthly averaged closing prices DAX 2010 2022 coarse scale, Volkswagen AG stock data fine scale, two hidden fine-scale coarse-scale states, respectively, state-dependent t-distributions demonstration purpose.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/dax_vw_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DAX/VW hierarchical HMM with t-distributions — dax_vw_model","text":"","code":"data(\"dax_vw_model\")"},{"path":"https://loelschlaeger.de/fHMM/reference/dax_vw_model.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"DAX/VW hierarchical HMM with t-distributions — dax_vw_model","text":"object class fHMM_model.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/dax_vw_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DAX/VW hierarchical HMM with t-distributions — dax_vw_model","text":"model estimated via:","code":"controls <- set_controls(   hierarchy = TRUE,   states    = c(2, 2),   sdds      = c(\"t\", \"t\"),   period    = \"m\",   data      = list(     file       = list(dax, vw),     from       = \"2010-01-01\",     to         = \"2022-12-31\",     logreturns = c(TRUE, TRUE)   ),   fit       = list(     runs       = 200,      iterlim    = 300,     gradtol    = 1e-6,     steptol    = 1e-6   ) ) dax_vw_data <- prepare_data(controls) dax_vw_model <- fit_model(dax_vw_data, seed = 1, ncluster = 10) dax_vw_model <- decode_states(dax_vw_model) dax_vw_model <- compute_residuals(dax_vw_model) summary(dax_vw_model)"},{"path":"https://loelschlaeger.de/fHMM/reference/decode_states.html","id":null,"dir":"Reference","previous_headings":"","what":"Decode the underlying hidden state sequence — decode_states","title":"Decode the underlying hidden state sequence — decode_states","text":"function decodes (likely) underlying hidden state sequence applying Viterbi algorithm global decoding.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/decode_states.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decode the underlying hidden state sequence — decode_states","text":"","code":"decode_states(x, verbose = TRUE)  viterbi(observations, nstates, sdd, Gamma, mu, sigma = NULL, df = NULL)"},{"path":"https://loelschlaeger.de/fHMM/reference/decode_states.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decode the underlying hidden state sequence — decode_states","text":"x object class fHMM_model. verbose Set TRUE print progress messages. observations numeric vector state-dependent observations. nstates number states. sdd character, specifying state-dependent distribution. One \"normal\" (normal distribution), \"lognormal\" (log-normal distribution), \"t\" (t-distribution), \"gamma\" (gamma distribution), \"poisson\" (Poisson distribution). Gamma transition probability matrix dimension nstates. mu numeric vector expected values state-dependent distribution different states length nstates. gamma- Poisson-distribution, mu must positive. sigma positive numeric vector standard deviations state-dependent distribution different states length nstates. relevant case state-dependent Poisson distribution. df positive numeric vector degrees freedom state-dependent distribution different states length nstates. relevant case state-dependent t-distribution.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/decode_states.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decode the underlying hidden state sequence — decode_states","text":"object class fHMM_model decoded state sequence included.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/decode_states.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Decode the underlying hidden state sequence — decode_states","text":"https://en.wikipedia.org/wiki/Viterbi_algorithm","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/decode_states.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Decode the underlying hidden state sequence — decode_states","text":"","code":"decode_states(dax_model_3t) #> Decoded states #> fHMM fitted model: #> * total estimation time: 7 mins  #> * accepted runs: 100 of 100  #> * log-likelihood: 17650.02  plot(dax_model_3t, type = \"ts\")  viterbi(   observations = c(1, 1, 1, 10, 10, 10),   nstates      = 2,   sdd          = \"poisson\",   Gamma        = matrix(0.5, 2, 2),   mu           = c(1, 10) ) #> [1] 1 1 1 2 2 2"},{"path":"https://loelschlaeger.de/fHMM/reference/download_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Download financial data from Yahoo Finance — download_data","title":"Download financial data from Yahoo Finance — download_data","text":"function downloads financial data https://finance.yahoo.com/ returns data.frame.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/download_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download financial data from Yahoo Finance — download_data","text":"","code":"download_data(   symbol,   from = \"1902-01-01\",   to = Sys.Date(),   fill_dates = FALSE,   columns = c(\"Date\", \"Open\", \"High\", \"Low\", \"Close\", \"Adj.Close\", \"Volume\") )"},{"path":"https://loelschlaeger.de/fHMM/reference/download_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download financial data from Yahoo Finance — download_data","text":"symbol character, stock's symbol. must match identifier https://finance.yahoo.com/. character format \"YYYY-MM-DD\", setting lower data bound. Must earlier \"1902-01-01\" (default). character format \"YYYY-MM-DD\", setting upper data bound. Default current date Sys.date(). fill_dates Set TRUE fill missing dates (e.g., days stock market closed) NA's. default, fill_dates = FALSE. columns character requested data columns, see details. default, columns returned.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/download_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download financial data from Yahoo Finance — download_data","text":"data.frame.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/download_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download financial data from Yahoo Finance — download_data","text":"Yahoo Finance provides historical daily data stocks indices. following data columns available: Date: date. Open: Opening price. High: Highest price. Low: Lowest price. Close: Close price adjusted splits. Adj.Close: Close price adjusted dividends splits. Volume: Trade volume.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/download_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download financial data from Yahoo Finance — download_data","text":"","code":"### 21st century DAX closing prices data <- download_data(   symbol = \"^GDAXI\", from = \"2000-01-01\", columns = c(\"Date\", \"Close\"),   fill_dates = TRUE ) head(data) #>         Date   Close #> 1 2000-01-01      NA #> 2 2000-01-02      NA #> 3 2000-01-03 6750.76 #> 4 2000-01-04 6586.95 #> 5 2000-01-05 6502.07 #> 6 2000-01-06 6474.92"},{"path":"https://loelschlaeger.de/fHMM/reference/fHMM-package.html","id":null,"dir":"Reference","previous_headings":"","what":"fHMM: Fitting Hidden Markov Models to Financial Data — fHMM-package","title":"fHMM: Fitting Hidden Markov Models to Financial Data — fHMM-package","text":"Fitting (hierarchical) hidden Markov models financial data via maximum likelihood estimation. See Oelschläger, L. Adam, T. \"Detecting bearish bullish markets financial time series using hierarchical hidden Markov models\" (2021, Statistical Modelling) doi:10.1177/1471082X211034048  reference.","code":""},{"path":[]},{"path":"https://loelschlaeger.de/fHMM/reference/fHMM-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"fHMM: Fitting Hidden Markov Models to Financial Data — fHMM-package","text":"Maintainer: Lennart Oelschläger oelschlaeger.lennart@gmail.com (ORCID) Authors: Timo Adam ta59@st-andrews.ac.uk (ORCID) Rouven Michels r.michels@uni-bielefeld.de (ORCID)","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/fHMM_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Set color scheme for visualizations — fHMM_colors","title":"Set color scheme for visualizations — fHMM_colors","text":"helper function defines color scheme visualizations {fHMM} package.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/fHMM_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set color scheme for visualizations — fHMM_colors","text":"","code":"fHMM_colors(controls, colors = NULL)"},{"path":"https://loelschlaeger.de/fHMM/reference/fHMM_colors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set color scheme for visualizations — fHMM_colors","text":"controls object class fHMM_controls. can created set_controls. colors Either NULL (default) character vector color names hexadecimal RGB triplets.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/fHMM_colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set color scheme for visualizations — fHMM_colors","text":"object class fHMM_colors, : controls$hierarchy == FALSE character vector length controls$states color codes, controls$hierarchy == TRUE list character vector length  controls$states[1] character matrix dimensions controls$states color codes.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/fHMM_colors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set color scheme for visualizations — fHMM_colors","text":"","code":"if (FALSE) { controls <- set_controls() fHMM_colors(controls, colors = c(\"red\", \"blue\")) }"},{"path":"https://loelschlaeger.de/fHMM/reference/fHMM_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor of an fHMM_data object — fHMM_data","title":"Constructor of an fHMM_data object — fHMM_data","text":"function constructs object class fHMM_data, contains financial data modeling.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/fHMM_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor of an fHMM_data object — fHMM_data","text":"","code":"fHMM_data(   dates,   time_points,   markov_chain,   data,   time_series,   T_star,   controls,   true_parameters )  # S3 method for fHMM_data print(x, ...)  # S3 method for fHMM_data summary(object, ...)"},{"path":"https://loelschlaeger.de/fHMM/reference/fHMM_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor of an fHMM_data object — fHMM_data","text":"dates dates empirical case. time_points time points simulated case. markov_chain states simulated case. data data modeling. time_series data transformation. T_star fine-scale chunk sizes. controls fHMM_controls object. true_parameters fHMM_parameters object simulated case. x object class fHMM_data. ... Currently used. object object class fHMM_data.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/fHMM_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor of an fHMM_data object — fHMM_data","text":"object class fHMM_data, list containing following elements: matrix dates simulated = FALSE controls$data$data_column specified, matrix time_points simulated = TRUE controls$data$data_column specified, matrix simulated markov_chain simulated = TRUE, matrix simulated empirical data used estimation, matrix time_series empirical data transformation log-returns simulated = FALSE, vector fine-scale chunk sizes T_star controls$hierarchy = TRUE, input controls, true_parameters.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/fHMM_events.html","id":null,"dir":"Reference","previous_headings":"","what":"Checking events — fHMM_events","title":"Checking events — fHMM_events","text":"function checks input events.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/fHMM_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checking events — fHMM_events","text":"","code":"fHMM_events(events)  # S3 method for fHMM_events print(x, ...)"},{"path":"https://loelschlaeger.de/fHMM/reference/fHMM_events.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checking events — fHMM_events","text":"events list two elements. first element named \"dates\" contains character vector format \"YYYY-MM-DD\". second element named \"labels\" character vector length \"dates\". x object class fHMM_events. ... Currently used.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/fHMM_events.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checking events — fHMM_events","text":"object class fHMM_events.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/fHMM_events.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checking events — fHMM_events","text":"","code":"events <- list(   dates = c(\"2001-09-11\", \"2008-09-15\", \"2020-01-27\"),   labels = c(     \"9/11 terrorist attack\", \"Bankruptcy Lehman Brothers\",     \"First COVID-19 case Germany\"   ) ) events <- fHMM_events(events)"},{"path":"https://loelschlaeger.de/fHMM/reference/fHMM_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor of a model object — fHMM_model","title":"Constructor of a model object — fHMM_model","text":"function constructs object class fHMM_model, contains details fitted (hierarchical) Hidden Markov model.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/fHMM_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor of a model object — fHMM_model","text":"","code":"fHMM_model(   data,   estimate,   nlm_output,   estimation_time,   ll,   lls,   gradient,   inverse_fisher,   decoding )  # S3 method for fHMM_model print(x, ...)  # S3 method for fHMM_model residuals(object, ...)  # S3 method for fHMM_model summary(object, alpha = 0.05, ...)  # S3 method for fHMM_model coef(object, alpha = 0.05, digits = 2, ...)  # S3 method for fHMM_model AIC(object, ..., k = 2)  # S3 method for fHMM_model BIC(object, ...)  # S3 method for fHMM_model nobs(object, ...)  # S3 method for fHMM_model logLik(object, ...)  npar(object, ...)  # S3 method for fHMM_model npar(object, ...)  # S3 method for fHMM_model predict(object, ahead = 5, alpha = 0.05, ...)"},{"path":"https://loelschlaeger.de/fHMM/reference/fHMM_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor of a model object — fHMM_model","text":"data object class fHMM_data. estimate numeric vector unconstrained model estimates. nlm_output output nlm selected optimization run. estimation_time diff.time object, total estimation time. ll numeric, model log-likelihood. lls numeric vector, model log-likelihoods optimization runs. gradient numeric vector, gradient optimum. inverse_fisher numeric vector, inverse Fisher information parameter. decoding numeric vector, decoded time series. x, object object class fHMM_model. ... Currently used. alpha numeric 0 1, confidence level. digits number decimal places. k Passed AIC. ahead number time points predict ahead.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/fHMM_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor of a model object — fHMM_model","text":"object class fHMM_model.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/fHMM_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Set and check model parameters — fHMM_parameters","title":"Set and check model parameters — fHMM_parameters","text":"function sets checks model parameters. Unspecified parameters sampled.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/fHMM_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set and check model parameters — fHMM_parameters","text":"","code":"fHMM_parameters(   controls = list(),   hierarchy = FALSE,   states = if (!hierarchy) 2 else c(2, 2),   sdds = if (!hierarchy) \"normal\" else c(\"normal\", \"normal\"),   Gamma = NULL,   mu = NULL,   sigma = NULL,   df = NULL,   Gamma_star = NULL,   mu_star = NULL,   sigma_star = NULL,   df_star = NULL,   scale_par = c(1, 1),   seed = NULL,   check_controls = TRUE )  # S3 method for fHMM_parameters print(x, ...)"},{"path":"https://loelschlaeger.de/fHMM/reference/fHMM_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set and check model parameters — fHMM_parameters","text":"controls Either list object class fHMM_controls. list can contain following elements, described detail : hierarchy, defines hierarchical HMM, states, defines number states, sdds, defines state-dependent distributions, horizon, defines time horizon, period, defines flexible, periodic fine-scale time horizon, data, list controls define data, fit, list controls define model fitting Either none, , selected elements can specified. Unspecified parameters set default values. Important: Specifications controls always override individual specifications. hierarchy logical, set TRUE hierarchical HMM. hierarchy = TRUE, controls must specified coarse-scale fine-scale layer. default, hierarchy = FALSE. states integer, number states underlying Markov chain. hierarchy = TRUE, states must vector length 2. first entry corresponds coarse-scale layer, second entry corresponds fine-scale layer. default, states = 2 hierarchy = FALSE states = c(2, 2) hierarchy = TRUE. sdds character, specifying state-dependent distribution. One \"normal\" (normal distribution), \"lognormal\" (log-normal distribution), \"t\" (t-distribution), \"gamma\" (gamma distribution), \"poisson\" (Poisson distribution). distribution parameters, .e. mean mu, standard deviation sigma (Poisson distribution), degrees freedom df (t-distribution), can fixed via, e.g., \"t(df = 1)\" \"gamma(mu = 0, sigma = 1)\". fix different values parameter different states, separate \"|\", e.g. \"poisson(mu = 1|2|3)\". hierarchy = TRUE, sdds must vector length 2. first entry corresponds coarse-scale layer, second entry corresponds fine-scale layer. default, sdds = \"normal\" hierarchy = FALSE sdds = c(\"normal\", \"normal\") hierarchy = TRUE. Gamma, Gamma_star transition probability matrix. dimension states[1]. Gamma_star list fine-scale transition probability matrices. list must length states[1]. transition probability matrix must dimension states[2]. mu, mu_star numeric vector expected values state-dependent distribution different states. gamma- Poisson-distribution, mu must positive. length states[1]. mu_star list vectors fine-scale expectations. list must length states[1]. vector must length states[2]. sigma, sigma_star positive numeric vector standard deviations state-dependent distribution different states. length states[1]. sigma_star list vectors fine-scale standard deviations. list must length states[1]. vector must length states[2]. df, df_star positive numeric vector degrees freedom state-dependent distribution different states. length states[1]. relevant case state-dependent t-distribution. df_star list vectors fine-scale degrees freedom. list must length states[1]. vector must length states[2]. relevant case fine-scale state-dependent t-distribution. scale_par positive numeric vector length two, containing scales sampled expectations standard deviations. first entry scale mu sigma, second entry scale mu_star sigma_star (). seed Sets seed sampling parameters. check_controls Either TRUE check defined controls FALSE check (saves computation time), else. x object class fHMM_parameters. ... Currently used.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/fHMM_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set and check model parameters — fHMM_parameters","text":"object class fHMM_parameters.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/fHMM_parameters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set and check model parameters — fHMM_parameters","text":"See vignette model definition details.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/fHMM_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set and check model parameters — fHMM_parameters","text":"","code":"parameters <- fHMM_parameters(states = 2, sdds = \"normal\") parameters$Gamma #>           state_1   state_2 #> state_1 0.6427256 0.3572744 #> state_2 0.4189383 0.5810617"},{"path":"https://loelschlaeger.de/fHMM/reference/fHMM_sdds.html","id":null,"dir":"Reference","previous_headings":"","what":"Define state-dependent distributions — fHMM_sdds","title":"Define state-dependent distributions — fHMM_sdds","text":"helper function defines state-dependent distributions.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/fHMM_sdds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define state-dependent distributions — fHMM_sdds","text":"","code":"fHMM_sdds(sdds, states)  # S3 method for fHMM_sdds print(x, ...)"},{"path":"https://loelschlaeger.de/fHMM/reference/fHMM_sdds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define state-dependent distributions — fHMM_sdds","text":"sdds character, specifying state-dependent distribution. One \"normal\" (normal distribution), \"lognormal\" (log-normal distribution), \"t\" (t-distribution), \"gamma\" (gamma distribution), \"poisson\" (Poisson distribution). distribution parameters, .e. mean mu, standard deviation sigma (Poisson distribution), degrees freedom df (t-distribution), can fixed via, e.g., \"t(df = 1)\" \"gamma(mu = 0, sigma = 1)\". fix different values parameter different states, separate \"|\", e.g. \"poisson(mu = 1|2|3)\". hierarchy = TRUE, sdds must vector length 2. first entry corresponds coarse-scale layer, second entry corresponds fine-scale layer. default, sdds = \"normal\" hierarchy = FALSE sdds = c(\"normal\", \"normal\") hierarchy = TRUE. states integer, number states underlying Markov chain. hierarchy = TRUE, states must vector length 2. first entry corresponds coarse-scale layer, second entry corresponds fine-scale layer. default, states = 2 hierarchy = FALSE states = c(2, 2) hierarchy = TRUE. ... Currently used.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/fHMM_sdds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define state-dependent distributions — fHMM_sdds","text":"list length 1 (2 hierarchical case). element list, containing \"name\" distribution list \"pars\" parameters, unknown parameters set NULL.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/fit_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Model fitting — fit_model","title":"Model fitting — fit_model","text":"function fits hidden Markov model via numerical likelihood maximization.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/fit_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model fitting — fit_model","text":"","code":"fit_model(   data,   controls = data[[\"controls\"]],   fit = list(),   runs = 10,   origin = FALSE,   accept = 1:3,   gradtol = 0.01,   iterlim = 100,   print.level = 0,   steptol = 0.01,   ncluster = 1,   seed = NULL,   verbose = TRUE,   initial_estimate = NULL )"},{"path":"https://loelschlaeger.de/fHMM/reference/fit_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model fitting — fit_model","text":"data object class fHMM_data. controls Either list object class fHMM_controls. list can contain following elements, described detail : hierarchy, defines hierarchical HMM, states, defines number states, sdds, defines state-dependent distributions, horizon, defines time horizon, period, defines flexible, periodic fine-scale time horizon, data, list controls define data, fit, list controls define model fitting Either none, , selected elements can specified. Unspecified parameters set default values. Important: Specifications controls always override individual specifications. fit list controls specifying model fitting. list can contain following elements, described detail : runs, defines number numerical optimization runs, origin, defines initialization true parameters, accept, defines set accepted optimization runs, gradtol, defines gradient tolerance, iterlim, defines iteration limit, print.level, defines level printing, steptol, defines minimum allowable relative step length. Either none, , selected elements can specified. Unspecified parameters set default values, see . Specifications fit override individual specifications. runs integer, setting number randomly initialized optimization runs model likelihood best one selected final model. default, runs = 10. origin relevant simulated data, .e., data control NA. case, logical. origin = TRUE optimization initialized true parameter values. sets run = 1 accept = 1:5. default, origin = FALSE. accept integer (vector), specifying optimization runs accepted based output code nlm. default, accept = 1:3. gradtol positive numeric value, specifying gradient tolerance, passed nlm. default, gradtol = 0.01. iterlim positive integer value, specifying iteration limit, passed nlm. default, iterlim = 100. print.level One 0, 1, 2 control verbosity numerical likelihood optimization, passed nlm. default, print.level = 0. steptol positive numeric value, specifying step tolerance, passed nlm. default, gradtol = 0.01. ncluster Set number clusters parallel optimization runs reduce optimization time. default, ncluster = 1 (clustering). seed Set seed generation initial values. seed default. verbose Set TRUE print progress messages. initial_estimate Optionally defines initial estimate numerical likelihood optimization. Good initial estimates can improve optimization process. Can : NULL (default), case applies heuristic calculate good initial estimate uses true parameter values (available data$controls$origin TRUE) object class parUncon (.e., numeric unconstrained model parameters), example estimate previously fitted model (.e. element model$estimate).","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/fit_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model fitting — fit_model","text":"object class fHMM_model.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/fit_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Model fitting — fit_model","text":"Multiple optimization runs starting different initial values computed parallel ncluster > 1.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/fit_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model fitting — fit_model","text":"","code":"### 2-state HMM with normal distributions  # set specifications controls <- set_controls(   states = 2, sdds = \"normal\", horizon = 100, runs = 10 )  # define parameters parameters <- fHMM_parameters(controls, mu = c(-1, 1), seed = 1)  # sample data data <- prepare_data(controls, true_parameter = parameters, seed = 1)  # fit model model <- fit_model(data, seed = 1) #> Checking start values... #> Maximizing likelihood... #> Approximating Hessian... #> Fitting completed!  # inspect fit summary(model) #> Summary of fHMM model #>  #>   simulated hierarchy        LL      AIC     BIC #> 1      TRUE     FALSE -62.46497 136.9299 152.561 #>  #> State-dependent distributions: #> normal()  #>  #> Estimates: #>                 lb estimate      ub    true #> Gamma_2.1  0.07297   0.1375  0.2441  0.1632 #> Gamma_1.2  0.14580   0.2638  0.4294  0.3116 #> mu_1      -1.01451  -0.9809 -0.9474 -1.0000 #> mu_2       0.91985   1.0404  1.1609  1.0000 #> sigma_1    0.08018   0.1013  0.1280  0.1008 #> sigma_2    0.41678   0.4954  0.5889  0.6008 plot(model, \"sdds\")   # decode states model <- decode_states(model) #> Decoded states plot(model, \"ts\")   # predict predict(model, ahead = 5) #>   state_1 state_2       lb estimate      ub #> 1 0.13749 0.86251  0.03672  0.76246 1.48820 #> 2 0.21980 0.78020 -0.07631  0.59608 1.26846 #> 3 0.26909 0.73091 -0.14397  0.49647 1.13691 #> 4 0.29859 0.70141 -0.18448  0.43683 1.05815 #> 5 0.31625 0.68375 -0.20874  0.40113 1.01099"},{"path":"https://loelschlaeger.de/fHMM/reference/get_initial_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization of numerical likelihood optimization — get_initial_values","title":"Initialization of numerical likelihood optimization — get_initial_values","text":"helper function generates set initial values numerical optimization model likelihood function.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/get_initial_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialization of numerical likelihood optimization — get_initial_values","text":"","code":"get_initial_values(   data,   ncluster = 1,   seed = NULL,   verbose = TRUE,   initial_estimate = NULL )"},{"path":"https://loelschlaeger.de/fHMM/reference/get_initial_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization of numerical likelihood optimization — get_initial_values","text":"data object class fHMM_data. ncluster Set number clusters parallel optimization runs reduce optimization time. default, ncluster = 1 (clustering). seed Set seed generation initial values. seed default. verbose Set TRUE print progress messages. initial_estimate Optionally defines initial estimate numerical likelihood optimization. Good initial estimates can improve optimization process. Can : NULL (default), case applies heuristic calculate good initial estimate uses true parameter values (available data$controls$origin TRUE) object class parUncon (.e., numeric unconstrained model parameters), example estimate previously fitted model (.e. element model$estimate).","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/get_initial_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization of numerical likelihood optimization — get_initial_values","text":"list, element object class parUncon.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/ll_hmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Log-likelihood function of an (H)HMM — ll_hmm","title":"Log-likelihood function of an (H)HMM — ll_hmm","text":"function computes log-likelihood value (hierarchical) hidden Markov model given observations parameter values.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/ll_hmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log-likelihood function of an (H)HMM — ll_hmm","text":"","code":"ll_hmm(   parUncon,   observations,   controls = list(),   hierarchy = FALSE,   states = if (!hierarchy) 2 else c(2, 2),   sdds = if (!hierarchy) \"normal\" else c(\"normal\", \"normal\"),   negative = FALSE,   check_controls = TRUE )"},{"path":"https://loelschlaeger.de/fHMM/reference/ll_hmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log-likelihood function of an (H)HMM — ll_hmm","text":"parUncon object class parUncon, numeric vector identified unconstrained model parameters following order: non-diagonal transition probabilities gammasUncon expectations muUncon standard deviations sigmaUncon () degrees freedom dfUncon () fine-scale parameters coarse-scale state, order () observations numeric vector time-series data. hierarchical case (hierarchy = TRUE), matrix coarse-scale data first column corresponding fine-scale data rows. controls Either list object class fHMM_controls. list can contain following elements, described detail : hierarchy, defines hierarchical HMM, states, defines number states, sdds, defines state-dependent distributions, horizon, defines time horizon, period, defines flexible, periodic fine-scale time horizon, data, list controls define data, fit, list controls define model fitting Either none, , selected elements can specified. Unspecified parameters set default values. Important: Specifications controls always override individual specifications. hierarchy logical, set TRUE hierarchical HMM. hierarchy = TRUE, controls must specified coarse-scale fine-scale layer. default, hierarchy = FALSE. states integer, number states underlying Markov chain. hierarchy = TRUE, states must vector length 2. first entry corresponds coarse-scale layer, second entry corresponds fine-scale layer. default, states = 2 hierarchy = FALSE states = c(2, 2) hierarchy = TRUE. sdds character, specifying state-dependent distribution. One \"normal\" (normal distribution), \"lognormal\" (log-normal distribution), \"t\" (t-distribution), \"gamma\" (gamma distribution), \"poisson\" (Poisson distribution). distribution parameters, .e. mean mu, standard deviation sigma (Poisson distribution), degrees freedom df (t-distribution), can fixed via, e.g., \"t(df = 1)\" \"gamma(mu = 0, sigma = 1)\". fix different values parameter different states, separate \"|\", e.g. \"poisson(mu = 1|2|3)\". hierarchy = TRUE, sdds must vector length 2. first entry corresponds coarse-scale layer, second entry corresponds fine-scale layer. default, sdds = \"normal\" hierarchy = FALSE sdds = c(\"normal\", \"normal\") hierarchy = TRUE. negative Either TRUE return negative log-likelihood value (useful optimization) FALSE (default), else. check_controls Either TRUE check defined controls FALSE check (saves computation time), else.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/ll_hmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log-likelihood function of an (H)HMM — ll_hmm","text":"(negative) log-likelihood value.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/ll_hmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log-likelihood function of an (H)HMM — ll_hmm","text":"","code":"### HMM log-likelihood  controls <- set_controls(states = 2, sdds = \"normal\") parameters <- fHMM_parameters(controls) parUncon <- par2parUncon(parameters, controls) observations <- 1:10 ll_hmm(parUncon, observations, controls) #> [1] -268.9179  ### HHMM log-likelihood  controls <- set_controls(   hierarchy = TRUE, states = c(2, 2), sdds = c(\"normal\", \"normal\") ) parameters <- fHMM_parameters(controls) parUncon <- par2parUncon(parameters, controls) observations <- matrix(dnorm(110), ncol = 11, nrow = 10) ll_hmm(parUncon, observations, controls) #> [1] -70.26436"},{"path":"https://loelschlaeger.de/fHMM/reference/nLL_hhmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Negative log-likelihood function of an HHMM — nLL_hhmm","title":"Negative log-likelihood function of an HHMM — nLL_hhmm","text":"function computes negative log-likelihood HHMM.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/nLL_hhmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Negative log-likelihood function of an HHMM — nLL_hhmm","text":"","code":"nLL_hhmm(parUncon, observations, controls)"},{"path":"https://loelschlaeger.de/fHMM/reference/nLL_hhmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Negative log-likelihood function of an HHMM — nLL_hhmm","text":"parUncon object class parUncon. observations matrix simulated empirical data used estimation. controls object class fHMM_controls.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/nLL_hhmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Negative log-likelihood function of an HHMM — nLL_hhmm","text":"negative log-likelihood value.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/nLL_hmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Negative log-likelihood function of an HMM — nLL_hmm","title":"Negative log-likelihood function of an HMM — nLL_hmm","text":"function computes negative log-likelihood HMM.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/nLL_hmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Negative log-likelihood function of an HMM — nLL_hmm","text":"","code":"nLL_hmm(parUncon, observations, controls)"},{"path":"https://loelschlaeger.de/fHMM/reference/nLL_hmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Negative log-likelihood function of an HMM — nLL_hmm","text":"parUncon object class parUncon. observations vector simulated empirical data used estimation. controls object class fHMM_controls.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/nLL_hmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Negative log-likelihood function of an HMM — nLL_hmm","text":"negative log-likelihood value.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/parameter_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Create labels for estimated parameters — parameter_labels","title":"Create labels for estimated parameters — parameter_labels","text":"helper function creates labels estimated HMM parameters.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/parameter_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create labels for estimated parameters — parameter_labels","text":"","code":"parameter_labels(controls, expected_length = NULL)"},{"path":"https://loelschlaeger.de/fHMM/reference/parameter_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create labels for estimated parameters — parameter_labels","text":"controls object class fHMM_controls. expected_length expected output length. NULL (default), checked.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/parameter_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create labels for estimated parameters — parameter_labels","text":"character vector parameter labels.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/parameter_transformations.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameter transformations — parameter_transformations","title":"Parameter transformations — parameter_transformations","text":"helper functions transform model parameters constrained spaces (suffix *Con) unconstrained spaces (suffix *Uncon). former useful interpretation, latter unconstrained optimization.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/parameter_transformations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameter transformations — parameter_transformations","text":"","code":"par2parUncon(par, controls, use_parameter_labels = TRUE)  parUncon2parCon(   parUncon,   controls,   use_parameter_labels = TRUE,   numerical_safeguard = FALSE )  parCon2par(parCon, controls, use_parameter_labels = TRUE)  par2parCon(par, controls, use_parameter_labels = TRUE)  parCon2parUncon(parCon, controls, use_parameter_labels = TRUE)  parUncon2par(   parUncon,   controls,   use_parameter_labels = TRUE,   numerical_safeguard = FALSE )  muCon2muUncon(muCon, link, prefix = \"muUncon_\", use_parameter_labels = TRUE)  muUncon2muCon(muUncon, link, prefix = \"muCon_\", use_parameter_labels = TRUE)  sigmaCon2sigmaUncon(   sigmaCon,   prefix = \"sigmaUncon_\",   use_parameter_labels = TRUE )  sigmaUncon2sigmaCon(   sigmaUncon,   prefix = \"sigmaCon_\",   use_parameter_labels = TRUE,   numerical_safeguard = FALSE )  dfCon2dfUncon(dfCon, prefix = \"dfUncon_\", use_parameter_labels = TRUE)  dfUncon2dfCon(   dfUncon,   prefix = \"dfCon_\",   use_parameter_labels = TRUE,   numerical_safeguard = FALSE )  Gamma2gammasCon(   Gamma,   prefix = \"gammasCon_\",   use_parameter_labels = TRUE,   numerical_safeguard = FALSE )  Gamma2gammasUncon(Gamma, prefix = \"gammasUncon_\", use_parameter_labels = TRUE)  gammasCon2Gamma(gammasCon, dim, prefix = \"state_\", use_parameter_labels = TRUE)  gammasCon2gammasUncon(   gammasCon,   dim,   prefix = \"gammasUncon_\",   use_parameter_labels = TRUE )  gammasUncon2Gamma(   gammasUncon,   dim,   prefix = \"state_\",   use_parameter_labels = TRUE,   numerical_safeguard = FALSE )  gammasUncon2gammasCon(   gammasUncon,   dim,   prefix = \"gammasCon_\",   use_parameter_labels = TRUE,   numerical_safeguard = FALSE )"},{"path":"https://loelschlaeger.de/fHMM/reference/parameter_transformations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameter transformations — parameter_transformations","text":"par object class fHMM_parameters, list model parameters. controls Either list object class fHMM_controls. list can contain following elements, described detail : hierarchy, defines hierarchical HMM, states, defines number states, sdds, defines state-dependent distributions, horizon, defines time horizon, period, defines flexible, periodic fine-scale time horizon, data, list controls define data, fit, list controls define model fitting Either none, , selected elements can specified. Unspecified parameters set default values. Important: Specifications controls always override individual specifications. use_parameter_labels Either TRUE label parameters FALSE, (can save computation time). parUncon object class parUncon, numeric vector identified unconstrained model parameters following order: non-diagonal transition probabilities gammasUncon expectations muUncon standard deviations sigmaUncon () degrees freedom dfUncon () fine-scale parameters coarse-scale state, order () numerical_safeguard Either TRUE FALSE, determining whether apply following small corrections boundary parameters improve numerical performance calculating optimizing likelihood function: transition probabilities equal 0 1 shifted towards center 1e-3 standard deviations degrees freedom bounded 100 parCon object class parCon, numeric vector identified (constrained) model parameters following order: non-diagonal transition probabilities gammasCon expectations muCon standard deviations sigmaCon () degrees freedom dfCon () fine-scale parameters coarse-scale state, order () muCon, muUncon vector (un-) constrained expected values. link Either TRUE FALSE, determining whether apply link function. prefix character prefix labeling parameters. sigmaCon, sigmaUncon vector (un-) constrained standard deviations. dfCon, dfUncon vector (un-) constrained degrees freedom. gammasCon, gammasUncon vector (un-) constrained non-diagonal transition probabilities. dim integer, dimension transition probability matrix.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/parameter_transformations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parameter transformations — parameter_transformations","text":"par2parUncon: vector unconstrained model parameters. parUncon2parCon: vector constrained model parameters. parCon2par: object class fHMM_parameters. par2parCon: vector constrained model parameters. parCon2parUncon: vector unconstrained model parameters. parUncon2par: object class fHMM_parameters. muCon2muUncon: vector unconstrained expected values. muUncon2muCon: vector constrained expected values. sigmaCon2sigmaUncon: vector unconstrained standard deviations. sigmaUncon2sigmaCon: vector constrained standard deviations. dfCon2dfUncon: vector unconstrained degrees freedom. dfUncon2dfCon: vector constrained degrees freedom. Gamma2gammasCon: vector constrained non-diagonal matrix elements (column-wise). Gamma2gammasUncon: vector unconstrained non-diagonal matrix elements (column-wise). gammasCon2Gamma: transition probability matrix. gammasCon2gammasUncon: vector unconstrained non-diagonal elements transition probability matrix. gammasUncon2Gamma: transition probability matrix. gammasUncon2gammasCon: vector constrained non-diagonal elements transition probability matrix.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/plot.fHMM_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot method for an object of class fHMM_data — plot.fHMM_data","title":"Plot method for an object of class fHMM_data — plot.fHMM_data","text":"function plot method object class fHMM_data.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/plot.fHMM_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot method for an object of class fHMM_data — plot.fHMM_data","text":"","code":"# S3 method for fHMM_data plot(x, events = NULL, title = NULL, from = NULL, to = NULL, ...)"},{"path":"https://loelschlaeger.de/fHMM/reference/plot.fHMM_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot method for an object of class fHMM_data — plot.fHMM_data","text":"x object class fHMM_data. events object class fHMM_events. title Optionally character custom title. Optionally character, date format \"YYYY-MM-DD\", setting lower date bound plotting. default, = NULL, .e. lower bound. Optionally character, date format \"YYYY-MM-DD\", setting upper date bound plotting. default, = NULL, .e. upper bound. ... Currently used.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/plot.fHMM_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot method for an object of class fHMM_data — plot.fHMM_data","text":"return value. Draws plot current device.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/plot.fHMM_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot method for an object of class fHMM_data — plot.fHMM_data","text":"","code":"plot(dax_model_3t$data, title = \"DAX time series\")"},{"path":"https://loelschlaeger.de/fHMM/reference/plot.fHMM_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot method for an object of class fHMM_model — plot.fHMM_model","title":"Plot method for an object of class fHMM_model — plot.fHMM_model","text":"function plot method object class fHMM_model.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/plot.fHMM_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot method for an object of class fHMM_model — plot.fHMM_model","text":"","code":"# S3 method for fHMM_model plot(   x,   plot_type = \"ts\",   events = NULL,   colors = NULL,   ll_relative = TRUE,   title = NULL,   from = NULL,   to = NULL,   ... )"},{"path":"https://loelschlaeger.de/fHMM/reference/plot.fHMM_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot method for an object of class fHMM_model — plot.fHMM_model","text":"x object class fHMM_model. plot_type character (vector), specifying type plot can one () \"ll\" visualization likelihood values different optimization runs, \"sdds\" visualization estimated state-dependent distributions, \"pr\" visualization model's (pseudo-) residuals, \"ts\" visualization financial time series. events object class fHMM_events. colors Either NULL (default) character vector color names hexadecimal RGB triplets. ll_relative logical, set TRUE (default) plot differences best log-likelihood value. Set FALSE plot absolute values. title Optionally character custom title. Optionally character, date format \"YYYY-MM-DD\", setting lower date bound plotting. default, = NULL, .e. lower bound. Optionally character, date format \"YYYY-MM-DD\", setting upper date bound plotting. default, = NULL, .e. upper bound. ... Currently used.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/plot.fHMM_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot method for an object of class fHMM_model — plot.fHMM_model","text":"return value. Draws plot current device.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/plot_ll.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualization of log-likelihood values — plot_ll","title":"Visualization of log-likelihood values — plot_ll","text":"function plots log-likelihood values different optimization runs.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/plot_ll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualization of log-likelihood values — plot_ll","text":"","code":"plot_ll(lls, ll_relative = TRUE)"},{"path":"https://loelschlaeger.de/fHMM/reference/plot_ll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualization of log-likelihood values — plot_ll","text":"lls numeric vector log-likelihood values. ll_relative logical, set TRUE (default) plot differences best log-likelihood value. Set FALSE plot absolute values.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/plot_ll.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualization of log-likelihood values — plot_ll","text":"return value. Draws plot current device.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/plot_pr.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize pseudo residuals — plot_pr","title":"Visualize pseudo residuals — plot_pr","text":"function visualizes pseudo residuals.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/plot_pr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize pseudo residuals — plot_pr","text":"","code":"plot_pr(residuals, hierarchy)"},{"path":"https://loelschlaeger.de/fHMM/reference/plot_pr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize pseudo residuals — plot_pr","text":"residuals object class fHMM_residuals. hierarchy element controls$hierarchy.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/plot_pr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize pseudo residuals — plot_pr","text":"return value. Draws plot current device.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/plot_sdds.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualization of estimated state-dependent distributions — plot_sdds","title":"Visualization of estimated state-dependent distributions — plot_sdds","text":"function plots estimated state-dependent distributions.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/plot_sdds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualization of estimated state-dependent distributions — plot_sdds","text":"","code":"plot_sdds(est, true = NULL, controls, colors)"},{"path":"https://loelschlaeger.de/fHMM/reference/plot_sdds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualization of estimated state-dependent distributions — plot_sdds","text":"est object class fHMM_parameters estimated parameters. true Either NULL object class fHMM_parameters true parameters. controls object class fHMM_controls. colors Either NULL (default) character vector color names hexadecimal RGB triplets.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/plot_sdds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualization of estimated state-dependent distributions — plot_sdds","text":"return value. Draws plot current device.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/plot_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize time series — plot_ts","title":"Visualize time series — plot_ts","text":"function visualizes data time series.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/plot_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize time series — plot_ts","text":"","code":"plot_ts(   data,   decoding,   colors,   events = NULL,   title = NULL,   from = NULL,   to = NULL )"},{"path":"https://loelschlaeger.de/fHMM/reference/plot_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize time series — plot_ts","text":"data object class fHMM_data. decoding Either NULL object class fHMM_decoding. colors Either NULL (default) character vector color names hexadecimal RGB triplets. events object class fHMM_events. title Optionally character custom title. Optionally character, date format \"YYYY-MM-DD\", setting lower date bound plotting. default, = NULL, .e. lower bound. Optionally character, date format \"YYYY-MM-DD\", setting upper date bound plotting. default, = NULL, .e. upper bound.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/plot_ts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize time series — plot_ts","text":"return value. Draws plot current device.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/prepare_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare data — prepare_data","title":"Prepare data — prepare_data","text":"function simulates reads financial data {fHMM} package.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/prepare_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare data — prepare_data","text":"","code":"prepare_data(controls, true_parameters = NULL, seed = NULL)"},{"path":"https://loelschlaeger.de/fHMM/reference/prepare_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare data — prepare_data","text":"controls object class fHMM_controls. true_parameters object class fHMM_parameters, used simulation parameters. default, true_parameters = NULL, .e., sampled true parameters. seed Set seed data simulation. seed per default.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/prepare_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare data — prepare_data","text":"object class fHMM_data.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/prepare_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare data — prepare_data","text":"","code":"controls <- set_controls() data <- prepare_data(controls) class(data) #> [1] \"fHMM_data\" summary(data) #> Summary of fHMM simulated data #> * number of observations: 100"},{"path":"https://loelschlaeger.de/fHMM/reference/read_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read data — read_data","title":"Read data — read_data","text":"helper function reads financial data {fHMM} package.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/read_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read data — read_data","text":"","code":"read_data(controls)"},{"path":"https://loelschlaeger.de/fHMM/reference/read_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read data — read_data","text":"controls object class fHMM_controls.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/read_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read data — read_data","text":"list containing following elements: matrix dates controls$simulated = FALSE controls$data$data_column specified, matrix time_points controls$simulated = TRUE controls$data$data_column specified, matrix empirical data used estimation, matrix named time_series empirical data transformation log-returns, vector fine-scale chunk sizes T_star controls$hierarchy = TRUE.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/reorder_states.html","id":null,"dir":"Reference","previous_headings":"","what":"Reorder estimated states — reorder_states","title":"Reorder estimated states — reorder_states","text":"function reorders estimated states, can useful comparison true parameters interpretation states.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/reorder_states.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reorder estimated states — reorder_states","text":"","code":"reorder_states(x, state_order = \"mean\")"},{"path":"https://loelschlaeger.de/fHMM/reference/reorder_states.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reorder estimated states — reorder_states","text":"x object class fHMM_model. state_order Either \"mean\", case states ordered according means state-dependent distributions, vector (matrix) determines new ordering: x$data$controls$hierarchy = FALSE, state_order must vector length x$data$controls$states integer values 1 x$data$controls$states. old state number x new state number y, put value x position y state_order. E.g. 2-state HMM, specifying state_order = c(2, 1) swaps states. x$data$controls$hierarchy = TRUE, state_order must matrix dimension x$data$controls$states[1] x x$data$controls$states[2] + 1. first column orders coarse-scale states logic described . row, elements second last position order fine-scale states coarse-scale state specified first element. E.g. HHMM 2 coarse-scale 2 fine-scale states, specifying state_order = matrix(c(2, 1, 2, 1, 1, 2), 2, 3) swaps coarse-scale states fine-scale states connected coarse-scale state 2.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/reorder_states.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reorder estimated states — reorder_states","text":"object class fHMM_model, states reordered.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/reorder_states.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reorder estimated states — reorder_states","text":"","code":"dax_model_3t_reordered <- reorder_states(dax_model_3t, state_order = 3:1)"},{"path":"https://loelschlaeger.de/fHMM/reference/set_controls.html","id":null,"dir":"Reference","previous_headings":"","what":"Define and validate model specifications — set_controls","title":"Define and validate model specifications — set_controls","text":"function defines validates specifications model estimation.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/set_controls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define and validate model specifications — set_controls","text":"","code":"set_controls(   controls = list(),   hierarchy = FALSE,   states = if (!hierarchy) 2 else c(2, 2),   sdds = if (!hierarchy) \"normal\" else c(\"normal\", \"normal\"),   horizon = if (!hierarchy) 100 else c(100, 30),   period = if (hierarchy && is.na(horizon[2])) \"m\" else NA,   data = NA,   file = NA,   date_column = if (!hierarchy) \"Date\" else c(\"Date\", \"Date\"),   data_column = if (!hierarchy) \"Close\" else c(\"Close\", \"Close\"),   from = NA,   to = NA,   logreturns = if (!hierarchy) FALSE else c(FALSE, FALSE),   merge = function(x) mean(x),   fit = list(),   runs = 10,   origin = FALSE,   accept = 1:3,   gradtol = 0.01,   iterlim = 100,   print.level = 0,   steptol = 0.01 )  validate_controls(controls)  # S3 method for fHMM_controls print(x, ...)  # S3 method for fHMM_controls summary(object, ...)"},{"path":"https://loelschlaeger.de/fHMM/reference/set_controls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define and validate model specifications — set_controls","text":"controls Either list object class fHMM_controls. list can contain following elements, described detail : hierarchy, defines hierarchical HMM, states, defines number states, sdds, defines state-dependent distributions, horizon, defines time horizon, period, defines flexible, periodic fine-scale time horizon, data, list controls define data, fit, list controls define model fitting Either none, , selected elements can specified. Unspecified parameters set default values. Important: Specifications controls always override individual specifications. hierarchy logical, set TRUE hierarchical HMM. hierarchy = TRUE, controls must specified coarse-scale fine-scale layer. default, hierarchy = FALSE. states integer, number states underlying Markov chain. hierarchy = TRUE, states must vector length 2. first entry corresponds coarse-scale layer, second entry corresponds fine-scale layer. default, states = 2 hierarchy = FALSE states = c(2, 2) hierarchy = TRUE. sdds character, specifying state-dependent distribution. One \"normal\" (normal distribution), \"lognormal\" (log-normal distribution), \"t\" (t-distribution), \"gamma\" (gamma distribution), \"poisson\" (Poisson distribution). distribution parameters, .e. mean mu, standard deviation sigma (Poisson distribution), degrees freedom df (t-distribution), can fixed via, e.g., \"t(df = 1)\" \"gamma(mu = 0, sigma = 1)\". fix different values parameter different states, separate \"|\", e.g. \"poisson(mu = 1|2|3)\". hierarchy = TRUE, sdds must vector length 2. first entry corresponds coarse-scale layer, second entry corresponds fine-scale layer. default, sdds = \"normal\" hierarchy = FALSE sdds = c(\"normal\", \"normal\") hierarchy = TRUE. horizon numeric, specifying length time horizon. hierarchy = TRUE, horizon must vector length 2. first entry corresponds coarse-scale layer, second entry corresponds fine-scale layer. default, horizon = 100 hierarchy = FALSE horizon = c(100, 30) hierarchy = TRUE. data specified (.e., NA), first entry horizon ignored (coarse-scale) time horizon defined available data. period relevant hierarchy = TRUE horizon[2] = NA. case, character specifies flexible, periodic fine-scale time horizon can one \"w\" week, \"m\" month, \"q\" quarter, \"y\" year. default, period = \"m\" hierarchy = TRUE horizon[2] = NA, NA else. data Either NA, case data simulated (default), list controls specifying empirical data set. list can contain following elements, described detail : file, defines data set, date_column, defines date column, data_column, defines data column, , defines lower date limit, , defines upper date limit, logreturns, defines data transformation log-returns, merge, defines merging coarse-scale observations. Either none, , selected elements can specified. Unspecified parameters set default values, see . Specifications data override individual specifications. file data.frame data dates modeling. hierarchy = TRUE, file can list length 2. first entry data.frame provides data coarse-scale layer, second entry corresponds fine-scale layer. file single data.frame, data.frame used layers. Alternatively, can character (length two), path .csv-file financial data. date_column character, name column file dates. hierarchy = TRUE file list two data.frames, data_column must vector length 2. first entry corresponds coarse-scale layer, second entry corresponds fine-scale layer. default, date_column = \"Date\". data_column character, name column file observations. hierarchy = TRUE, data_column must vector length 2. first entry corresponds coarse-scale layer, second entry corresponds fine-scale layer. default, data_column = \"Close\" hierarchy = FALSE data_column = c(\"Close\", \"Close\") hierarchy = TRUE. character format \"YYYY-MM-DD\", setting lower date limit. lower limit = NA (default). character format \"YYYY-MM-DD\", setting upper date limit. lower limit = NA (default). logreturns logical, TRUE data transformed log-returns. hierarchy = TRUE, logreturns must vector length 2. first entry corresponds coarse-scale layer, second entry corresponds fine-scale layer. default, logreturns = FALSE hierarchy = FALSE logreturns = c(FALSE, FALSE) hierarchy = TRUE. merge relevant hierarchy = TRUE. case, function merges input numeric vector fine-scale data x one coarse-scale observation. example, merge = function(x) mean(x) (default) defines mean fine-scale data coarse-scale observation, merge = function(x) mean(abs(x)) mean absolute values, merge = function(x) sum(abs(x)) sum absolute values, merge = function(x) (tail(x, 1) - head(x, 1)) / head(x, 1) relative change first last fine-scale observation. fit list controls specifying model fitting. list can contain following elements, described detail : runs, defines number numerical optimization runs, origin, defines initialization true parameters, accept, defines set accepted optimization runs, gradtol, defines gradient tolerance, iterlim, defines iteration limit, print.level, defines level printing, steptol, defines minimum allowable relative step length. Either none, , selected elements can specified. Unspecified parameters set default values, see . Specifications fit override individual specifications. runs integer, setting number randomly initialized optimization runs model likelihood best one selected final model. default, runs = 10. origin relevant simulated data, .e., data control NA. case, logical. origin = TRUE optimization initialized true parameter values. sets run = 1 accept = 1:5. default, origin = FALSE. accept integer (vector), specifying optimization runs accepted based output code nlm. default, accept = 1:3. gradtol positive numeric value, specifying gradient tolerance, passed nlm. default, gradtol = 0.01. iterlim positive integer value, specifying iteration limit, passed nlm. default, iterlim = 100. print.level One 0, 1, 2 control verbosity numerical likelihood optimization, passed nlm. default, print.level = 0. steptol positive numeric value, specifying step tolerance, passed nlm. default, gradtol = 0.01. x, object object class fHMM_controls. ... Currently used.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/set_controls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define and validate model specifications — set_controls","text":"object class fHMM_controls, list contains model estimation specifications.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/set_controls.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define and validate model specifications — set_controls","text":"See vignette controls details.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/set_controls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define and validate model specifications — set_controls","text":"","code":"# 2-state HMM with t-distributions for simulated data set_controls(   states = 2,   # the number of states   sdds   = \"t\", # the state-dependent distribution   runs   = 50   # the number of optimization runs ) #> fHMM controls: #> * hierarchy: FALSE  #> * data type: simulated  #> * number of states: 2  #> * sdds: t()  #> * number of runs: 50    # 3-state HMM with normal distributions for the DAX closing prices set_controls(   states      = 3,   sdds        = \"normal\",   file        = download_data(\"^GDAXI\"), # the data set   date_column = \"Date\",                   # the column with the dates   data_column = \"Close\"                   # the column with the data ) #> fHMM controls: #> * hierarchy: FALSE  #> * data type: empirical  #> * number of states: 3  #> * sdds: normal()  #> * number of runs: 10    # hierarchical HMM with Gamma and Poisson state distributions set_controls(   hierarchy = TRUE,                  # defines a hierarchy   states    = c(3, 2),               # coarse scale and fine scale states   sdds      = c(\"gamma\", \"poisson\"), # distributions for both layers   horizon   = c(100, NA),            # 100 simulated coarse-scale data points    period    = \"m\"                    # monthly simulated fine-scale data ) #> fHMM controls: #> * hierarchy: TRUE  #> * data type: simulated  #> * number of states: 3 2  #> * sdds: gamma() poisson()  #> * number of runs: 10    # hierarchical HMM with data from .csv-file set_controls(   hierarchy = TRUE,   states    = c(3, 2),   sdds      = c(\"t\", \"t\"),   file      = c(                    system.file(\"extdata\", \"dax.csv\", package = \"fHMM\"),     system.file(\"extdata\", \"vw.csv\", package = \"fHMM\")   ),   date_column = c(\"Date\", \"Date\"),    data_column = c(\"Close\", \"Close\"),   logreturns  = c(TRUE, TRUE) ) #> fHMM controls: #> * hierarchy: TRUE  #> * data type: empirical  #> * number of states: 3 2  #> * sdds: t() t()  #> * number of runs: 10"},{"path":"https://loelschlaeger.de/fHMM/reference/sim_model_2gamma.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated 2-state HMM with gamma distributions — sim_model_2gamma","title":"Simulated 2-state HMM with gamma distributions — sim_model_2gamma","text":"pre-computed 2-state HMM state-dependent gamma distributions means fixed 0.5 2 500 simulated observations.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/sim_model_2gamma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated 2-state HMM with gamma distributions — sim_model_2gamma","text":"","code":"data(\"sim_model_2gamma\")"},{"path":"https://loelschlaeger.de/fHMM/reference/sim_model_2gamma.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated 2-state HMM with gamma distributions — sim_model_2gamma","text":"object class fHMM_model.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/sim_model_2gamma.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulated 2-state HMM with gamma distributions — sim_model_2gamma","text":"model estimated via:","code":"controls <- set_controls(   states  = 2,   sdds    = \"gamma(mu = 1|2)\",   horizon = 200,   runs    = 10 ) pars <- fHMM_parameters(   controls = controls,   Gamma = matrix(c(0.9, 0.2, 0.1, 0.8), nrow = 2),   sigma = c(0.5, 1),   seed = 1 ) data_sim <- prepare_data(controls, true_parameters = pars, seed = 1) sim_model_2gamma <- fit_model(data_sim, seed = 1) sim_model_2gamma <- decode_states(sim_model_2gamma) sim_model_2gamma <- compute_residuals(sim_model_2gamma) summary(sim_model_2gamma)"},{"path":"https://loelschlaeger.de/fHMM/reference/simulate_hmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate data — simulate_hmm","title":"Simulate data — simulate_hmm","text":"helper function simulates HMM data.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/simulate_hmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate data — simulate_hmm","text":"","code":"simulate_hmm(   controls = list(),   hierarchy = FALSE,   states = if (!hierarchy) 2 else c(2, 2),   sdds = if (!hierarchy) \"normal\" else c(\"normal\", \"normal\"),   horizon = if (!hierarchy) 100 else c(100, 30),   period = if (hierarchy && is.na(horizon[2])) \"m\" else NA,   true_parameters = fHMM_parameters(controls = controls, hierarchy = hierarchy, states =     states, sdds = sdds),   seed = NULL )"},{"path":"https://loelschlaeger.de/fHMM/reference/simulate_hmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate data — simulate_hmm","text":"controls Either list object class fHMM_controls. list can contain following elements, described detail : hierarchy, defines hierarchical HMM, states, defines number states, sdds, defines state-dependent distributions, horizon, defines time horizon, period, defines flexible, periodic fine-scale time horizon, data, list controls define data, fit, list controls define model fitting Either none, , selected elements can specified. Unspecified parameters set default values. Important: Specifications controls always override individual specifications. hierarchy logical, set TRUE hierarchical HMM. hierarchy = TRUE, controls must specified coarse-scale fine-scale layer. default, hierarchy = FALSE. states integer, number states underlying Markov chain. hierarchy = TRUE, states must vector length 2. first entry corresponds coarse-scale layer, second entry corresponds fine-scale layer. default, states = 2 hierarchy = FALSE states = c(2, 2) hierarchy = TRUE. sdds character, specifying state-dependent distribution. One \"normal\" (normal distribution), \"lognormal\" (log-normal distribution), \"t\" (t-distribution), \"gamma\" (gamma distribution), \"poisson\" (Poisson distribution). distribution parameters, .e. mean mu, standard deviation sigma (Poisson distribution), degrees freedom df (t-distribution), can fixed via, e.g., \"t(df = 1)\" \"gamma(mu = 0, sigma = 1)\". fix different values parameter different states, separate \"|\", e.g. \"poisson(mu = 1|2|3)\". hierarchy = TRUE, sdds must vector length 2. first entry corresponds coarse-scale layer, second entry corresponds fine-scale layer. default, sdds = \"normal\" hierarchy = FALSE sdds = c(\"normal\", \"normal\") hierarchy = TRUE. horizon numeric, specifying length time horizon. hierarchy = TRUE, horizon must vector length 2. first entry corresponds coarse-scale layer, second entry corresponds fine-scale layer. default, horizon = 100 hierarchy = FALSE horizon = c(100, 30) hierarchy = TRUE. data specified (.e., NA), first entry horizon ignored (coarse-scale) time horizon defined available data. period relevant hierarchy = TRUE horizon[2] = NA. case, character specifies flexible, periodic fine-scale time horizon can one \"w\" week, \"m\" month, \"q\" quarter, \"y\" year. default, period = \"m\" hierarchy = TRUE horizon[2] = NA, NA else. true_parameters object class fHMM_parameters, used simulation parameters. default, true_parameters = NULL, .e., sampled true parameters. seed Set seed data simulation. seed per default.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/simulate_hmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate data — simulate_hmm","text":"list containing following elements: time_points, vector (matrix hierarchical case) time points, markov_chain, vector (matrix hierarchical case) simulated states, data, vector (matrix hierarchical case) simulated state-dependent observations, T_star, numeric vector fine-scale chunk sizes hierarchical case","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/simulate_hmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate data — simulate_hmm","text":"","code":"simulate_hmm(states = 2, sdds = \"normal\", horizon = 10) #> $time_points #>  [1]  1  2  3  4  5  6  7  8  9 10 #>  #> $markov_chain #>  [1] 2 2 2 1 1 1 1 1 1 1 #>  #> $data #>  [1] -0.6585950  1.0541351 -0.3196731 -0.2888282 -0.1801663 -0.3192822 #>  [7] -0.1275880 -0.2889544 -0.3983131 -0.1707813 #>  #> $T_star #> NULL #>"},{"path":"https://loelschlaeger.de/fHMM/reference/simulate_observations.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate state-dependent observations — simulate_observations","title":"Simulate state-dependent observations — simulate_observations","text":"function simulates state-dependent observations.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/simulate_observations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate state-dependent observations — simulate_observations","text":"","code":"simulate_observations(   markov_chain,   sdd,   mu,   sigma = NULL,   df = NULL,   seed = NULL,   total_length = length(markov_chain) )"},{"path":"https://loelschlaeger.de/fHMM/reference/simulate_observations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate state-dependent observations — simulate_observations","text":"markov_chain numeric vector states Markov chain. sdd character, name state-dependent distribution. mu numeric vector expected values. sigma numeric vector standard deviations (). df numeric vector degrees freedom (). seed Sets seed observation sampling. total_length integer, total length output vector. Must greater equal length(markov_chain).","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/simulate_observations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate state-dependent observations — simulate_observations","text":"numeric vector length total_length, first length(markov_chain) elements numeric values last total_length - length(markov_chain) elements NA_real_.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/spx.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard & Poor’s 500 (S&P 500) index data — spx","title":"Standard & Poor’s 500 (S&P 500) index data — spx","text":"Standard & Poor’s 500 (S&P 500) index data 1928 2022 Yahoo Finance.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/spx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard & Poor’s 500 (S&P 500) index data — spx","text":"","code":"spx"},{"path":"https://loelschlaeger.de/fHMM/reference/spx.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Standard & Poor’s 500 (S&P 500) index data — spx","text":"data.frame 23864 rows following 7 columns: Date: date. Open: Opening price. High: Highest price. Low: Lowest price. Close: Close price adjusted splits. Adj.Close: Close price adjusted dividends splits. Volume: Trade volume.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/spx.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standard & Poor’s 500 (S&P 500) index data — spx","text":"data obtained via: data also available .csv file via:","code":"spx <- download_data(   symbol = \"^GSPC\",    # S&P 500 identifier on Yahoo Finance   from = \"1928-01-01\", # first observation   to = \"2022-12-31\"    # last observation ) system.file(\"extdata\", \"spx.csv\", package = \"fHMM\")"},{"path":"https://loelschlaeger.de/fHMM/reference/unemp.html","id":null,"dir":"Reference","previous_headings":"","what":"Unemployment rate data USA — unemp","title":"Unemployment rate data USA — unemp","text":"monthly unemployment rate USA 1955 2022 daily observation basis.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/unemp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unemployment rate data USA — unemp","text":"","code":"unemp"},{"path":"https://loelschlaeger.de/fHMM/reference/unemp.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Unemployment rate data USA — unemp","text":"data.frame 24806 rows following 3 columns: date: date. rate: unemployment rate. rate_diff: difference rate previous month.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/unemp.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Unemployment rate data USA — unemp","text":"OECD (2023), Unemployment rate (indicator). doi: 10.1787/52570002-en (Accessed 18 January 2023) https://data.oecd.org/unemp/unemployment-rate.htm","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/unemp_spx_model_3_2.html","id":null,"dir":"Reference","previous_headings":"","what":"Unemployment rate and S&P 500 hierarchical HMM — unemp_spx_model_3_2","title":"Unemployment rate and S&P 500 hierarchical HMM — unemp_spx_model_3_2","text":"pre-computed HHMM monthly unemployment rate US coarse scale using 3 states S&P 500 index data fine scale using 2 states 1970 2020 demonstration purpose.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/unemp_spx_model_3_2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unemployment rate and S&P 500 hierarchical HMM — unemp_spx_model_3_2","text":"","code":"data(\"unemp_spx_model_3_2\")"},{"path":"https://loelschlaeger.de/fHMM/reference/unemp_spx_model_3_2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Unemployment rate and S&P 500 hierarchical HMM — unemp_spx_model_3_2","text":"object class fHMM_model.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/unemp_spx_model_3_2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Unemployment rate and S&P 500 hierarchical HMM — unemp_spx_model_3_2","text":"model estimated via:","code":"controls <- set_controls(  hierarchy = TRUE,  states    = c(3, 2),  sdds      = c(\"t\", \"t\"),  period    = \"m\",  data      = list(    file        = list(unemp, spx),    date_column = c(\"date\", \"Date\"),    data_column = c(\"rate_diff\", \"Close\"),    from        = \"1970-01-01\",    to          = \"2020-01-01\",    logreturns  = c(FALSE, TRUE)  ),  fit       = list(    runs        = 50,     iterlim     = 1000,    gradtol     = 1e-6,    steptol     = 1e-6  ) ) unemp_spx_data <- prepare_data(controls) unemp_spx_model_3_2 <- fit_model(unemp_spx_data, seed = 1, ncluster = 25) unemp_spx_model_3_2 <- decode_states(unemp_spx_model_3_2) unemp_spx_model_3_2 <- compute_residuals(unemp_spx_model_3_2) summary(unemp_spx_model_3_2) state_order <- matrix(c(3, 2, 1, 2, 2, 2, 1, 1, 1), 3, 3) unemp_spx_model_3_2 <- reorder_states(unemp_spx_model_3_2, state_order)"},{"path":"https://loelschlaeger.de/fHMM/reference/vw.html","id":null,"dir":"Reference","previous_headings":"","what":"Volkswagen AG (VW) stock data — vw","title":"Volkswagen AG (VW) stock data — vw","text":"Volkswagen AG (VW) stock data 1998 2022 Yahoo Finance.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/vw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Volkswagen AG (VW) stock data — vw","text":"","code":"vw"},{"path":"https://loelschlaeger.de/fHMM/reference/vw.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Volkswagen AG (VW) stock data — vw","text":"data.frame 6260 rows following 7 columns: Date: date. Open: Opening price. High: Highest price. Low: Lowest price. Close: Close price adjusted splits. Adj.Close: Close price adjusted dividends splits. Volume: Trade volume.","code":""},{"path":"https://loelschlaeger.de/fHMM/reference/vw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Volkswagen AG (VW) stock data — vw","text":"data obtained via: data also available .csv file via:","code":"vw <- download_data(   symbol = \"VOW3.DE\",  # Volkswagen AG identifier on Yahoo Finance   from = \"1988-07-22\", # first observation   to = \"2022-12-31\"    # last observation ) system.file(\"extdata\", \"vw.csv\", package = \"fHMM\")"},{"path":"https://loelschlaeger.de/fHMM/news/index.html","id":"fhmm-130","dir":"Changelog","previous_headings":"","what":"fHMM 1.3.0","title":"fHMM 1.3.0","text":"Improved initialization numerical likelihood optimization. Now states model estimation automatically ordered according estimated mean state-dependent distributions, see reorder_states() new (default) option state_order = \"mean\". Re-fitted example models contained package.","code":""},{"path":"https://loelschlaeger.de/fHMM/news/index.html","id":"fhmm-122","dir":"Changelog","previous_headings":"","what":"fHMM 1.2.2","title":"fHMM 1.2.2","text":"CRAN release: 2024-02-24 Added examples fit_model(). Small code improvements file ll.cpp.","code":""},{"path":"https://loelschlaeger.de/fHMM/news/index.html","id":"fhmm-121","dir":"Changelog","previous_headings":"","what":"fHMM 1.2.1","title":"fHMM 1.2.1","text":"CRAN release: 2024-01-15 Small bug fix computing stationary distribution.","code":""},{"path":"https://loelschlaeger.de/fHMM/news/index.html","id":"fhmm-120","dir":"Changelog","previous_headings":"","what":"fHMM 1.2.0","title":"fHMM 1.2.0","text":"CRAN release: 2023-12-13 Controls can now provided separately set_controls() function. arguments fHMM_parameters() model parameters slightly renamed follows: mus -> mu sigmas -> sigma dfs -> df Gammas_star -> Gamma_star mus_star -> mu_star sigmas_star -> sigma_star dfs_star -> df_star log-normal state-dependent distribution renamed: lnorm -> lognormal. Two state-dependent distributions added: normal poisson. Viterbi algorithm can directly accessed via viterbi(). Renamed simulate_data() -> simulate_hmm() make functionality clearer. Furthermore, function now exported can used outside package simulate HMM data. download_data() longer saves .csv-file returns data data.frame. verbose argument removed function longer prints messages. utilities (.e., functions roxygen tag @keywords utils) moved {oeli} package.","code":""},{"path":"https://loelschlaeger.de/fHMM/news/index.html","id":"fhmm-111","dir":"Changelog","previous_headings":"","what":"fHMM 1.1.1","title":"fHMM 1.1.1","text":"CRAN release: 2023-10-12 Fixed documenting new special sentinel “_PACKAGE” package help file, see https://github.com/r-lib/roxygen2/issues/1491.","code":""},{"path":"https://loelschlaeger.de/fHMM/news/index.html","id":"fhmm-110","dir":"Changelog","previous_headings":"","what":"fHMM 1.1.0","title":"fHMM 1.1.0","text":"CRAN release: 2023-02-14 Extended time horizon saved data updated models demonstration. download_data() function now returns data data.frame default. However, specifying argument file still allows saving data .csv file. plot.fHMM_model() function now additional argument ll_relative (default TRUE) plot relative log-likelihood values plot_type = \"ll\". Significantly increased test coverage fixed minor bugs. Changed color time series plot \"lightgray\" \"black\" better readability. Added title time series plot calling plot.fHMM_model(plot_type = \"ts\"). Additionally, time interval arguments can selected zoom data.","code":""},{"path":"https://loelschlaeger.de/fHMM/news/index.html","id":"fhmm-103","dir":"Changelog","previous_headings":"","what":"fHMM 1.0.3","title":"fHMM 1.0.3","text":"CRAN release: 2022-07-07 Added following methods fHMM_model object: AIC(), BIC(), logLik(), nobs(), npar(), residuals(). log-normal distribution can now estimated setting sdds = \"lnorm\" controls object.","code":""},{"path":"https://loelschlaeger.de/fHMM/news/index.html","id":"fhmm-102","dir":"Changelog","previous_headings":"","what":"fHMM 1.0.2","title":"fHMM 1.0.2","text":"CRAN release: 2022-05-02 Fixed bug reorder_states() order fine-scale parameter sets coarse-scale order changed. Fixed bug parameter_labels() returned wrong order parameter labels. Changed plot type simulated data lines.","code":""},{"path":"https://loelschlaeger.de/fHMM/news/index.html","id":"fhmm-101","dir":"Changelog","previous_headings":"","what":"fHMM 1.0.1","title":"fHMM 1.0.1","text":"CRAN release: 2022-04-07 vignette controls, section example specifications controls, corrected sdds = \"gamma(mu = -1|1)\" sdds = \"gamma(mu = 0.5|2)\" mean Gamma distribution must positive. Added digits argument print.fHMM_predict(). Fixed bug reorder_states() allowed misspecification state_order. Added option fit_model() initialize estimates another model (#73).","code":""},{"path":"https://loelschlaeger.de/fHMM/news/index.html","id":"fhmm-100","dir":"Changelog","previous_headings":"","what":"fHMM 1.0.0","title":"fHMM 1.0.0","text":"CRAN release: 2022-03-14 Enhanced package S3 classes. Added controls specifications. Included prediction function. Improved documentations.","code":""},{"path":"https://loelschlaeger.de/fHMM/news/index.html","id":"fhmm-030","dir":"Changelog","previous_headings":"","what":"fHMM 0.3.0","title":"fHMM 0.3.0","text":"CRAN release: 2021-06-16 Added vignettes. Improved specification controls. Fixed minor bugs.","code":""},{"path":"https://loelschlaeger.de/fHMM/news/index.html","id":"fhmm-020","dir":"Changelog","previous_headings":"","what":"fHMM 0.2.0","title":"fHMM 0.2.0","text":"CRAN release: 2021-03-13 Improved documentation functions README. Improved specification controls. (#37 #38)","code":""},{"path":"https://loelschlaeger.de/fHMM/news/index.html","id":"fhmm-010","dir":"Changelog","previous_headings":"","what":"fHMM 0.1.0","title":"fHMM 0.1.0","text":"CRAN release: 2021-02-22 Initial version.","code":""}]
